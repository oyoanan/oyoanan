<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>北京交通大学-图像处理</title>
    <link href="/2024/03/25/%E5%8C%97%E4%BA%AC%E4%BA%A4%E9%80%9A%E5%A4%A7%E5%AD%A6-%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    <url>/2024/03/25/%E5%8C%97%E4%BA%AC%E4%BA%A4%E9%80%9A%E5%A4%A7%E5%AD%A6-%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="北京交通大学-图像处理"><a href="#北京交通大学-图像处理" class="headerlink" title="北京交通大学-图像处理"></a>北京交通大学-图像处理</h1><h2 id="I-基本概念"><a href="#I-基本概念" class="headerlink" title="I 基本概念"></a>I 基本概念</h2><h3 id="一、模拟图像"><a href="#一、模拟图像" class="headerlink" title="一、模拟图像"></a>一、模拟图像</h3><p>通过某种连续的物理量，光或电等的强弱变化，记录图像的亮度信息。</p><h3 id="二、数字图像"><a href="#二、数字图像" class="headerlink" title="二、数字图像"></a>二、数字图像</h3><p>采用数字表示方式，记录图像亮度信息，计算机进行存储和处理。</p><h3 id="三、采样和量化"><a href="#三、采样和量化" class="headerlink" title="三、采样和量化"></a>三、采样和量化</h3><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854865.png" alt="image-20240314155530861"></p><blockquote><p>数字图像就是对模拟图像进行了空间采样和亮度量化</p></blockquote><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854881.png" alt="image-20240314155619393"></p><p>**1、数字图像的数学模型$f(x,y)$ **</p><p>$(x,y)$表示像素位置，$f(x,y)$表示像素灰度值。</p><p><strong>2、数字图像可以表示为以像素为元素的矩阵</strong></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854911.png" alt="image-20240314160001472"></p><h3 id="四、空间分辨率"><a href="#四、空间分辨率" class="headerlink" title="四、空间分辨率"></a>四、空间分辨率</h3><p><strong>采样间隔</strong></p><p>图像采样间隔是指在数字图像处理中，采样过程中相邻采样点之间的距离。</p><p>采样间隔决定了图像的分辨率和细节表现能力，间隔越小，图像的细节表现能力越高。</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854807.png" alt="image-20240314160222022"></p><blockquote><p>采样间隔4x4通常指的是在图像处理中进行采样时，每隔4个像素点取一个样本。</p></blockquote><h3 id="五、亮度分辨率"><a href="#五、亮度分辨率" class="headerlink" title="五、亮度分辨率"></a>五、亮度分辨率</h3><p>衡量图像亮度的量化精度。</p><p>灰度级是指在数字图像中用来表示每个像素亮度或颜色深浅程度的级别。</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854819.png" alt="image-20240314160732528"></p><h3 id="六、图像存储与格式"><a href="#六、图像存储与格式" class="headerlink" title="六、图像存储与格式"></a>六、图像存储与格式</h3><p><strong>1、数字存储比特数</strong></p><blockquote><p>8位图像使用8个比特（bit）来表示每个像素的颜色或亮度，因此可以有2^8 &#x3D; 256个不同的颜色或亮度级别。同样，10位图像使用10个比特来表示每个像素的颜色或亮度，因此可以有2^10&#x3D;1024个不同的颜色或亮度级别。</p></blockquote><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854772.png" alt="image-20240314161631769"></p><p><strong>2、数字图像格式</strong></p><p>数字图像文件存放在记忆卡上的格式、压缩方式（BMP &#x2F; JPEG &#x2F; GIF &#x2F; PNG)</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854981.png" alt="image-20240314162359510"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854529.png" alt="image-20240314162659873"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854548.png" alt="image-20240314162713886"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854740.png" alt="image-20240314162747850"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854514.png" alt="image-20240314165009141"></p><h3 id="七、直方图"><a href="#七、直方图" class="headerlink" title="七、直方图"></a>七、直方图</h3><p>数字图像：以空间位置$(x,y)$为自变量的二维函数$f(x,y)$</p><p>不同灰度级分布构成不同图像，统计灰度级出现的次数（概率）— 灰度直方图</p><h4 id="直方图定义"><a href="#直方图定义" class="headerlink" title="直方图定义"></a>直方图定义</h4><p><strong>1、灰度直方图</strong></p><blockquote><p>灰度级的函数、具有该灰度级的像素个数</p></blockquote><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854519.png" alt="image-20240314230732842"></p><p>示例：</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854060.png" alt="image-20240314230829586"></p><p>灰度直方图反映了图像灰度的分布(统计)特征：</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854239.png" alt="image-20240314230943679"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854124.png" alt="image-20240314232014758"></p><p><strong>2、灰度直方图归一化</strong></p><blockquote><p>灰度级出现的概率</p></blockquote><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854404.png" alt="image-20240314232100647"></p><h4 id="直方图性质"><a href="#直方图性质" class="headerlink" title="直方图性质"></a>直方图性质</h4><p>直方图表征了图像中灰度级分布特性，一幅图像具有特定的唯一的直方图。</p><p>一个直方图可以对应多副图像。</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854345.png" alt="image-20240314232610675"></p><h4 id="直方图应用"><a href="#直方图应用" class="headerlink" title="直方图应用"></a>直方图应用</h4><p><strong>1、图像增强（直方图均衡）</strong></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854678.png" alt="image-20240314232718385"></p><p><strong>2、图像分割（根据直方图获取分割阈值）</strong></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854626.png" alt="image-20240315110528363"></p><p><strong>3、图像分类（直方图对比）</strong></p><p>观测是否有人经过：</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854764.png" alt="image-20240315110633267"></p><h2 id="Ⅱ-图像增强"><a href="#Ⅱ-图像增强" class="headerlink" title="Ⅱ 图像增强"></a>Ⅱ 图像增强</h2><p><strong>哪些情况需要增强？</strong></p><p>视觉效果不佳、噪声污染、难以分析理解</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854057.png" alt="image-20240315121435028"></p><blockquote><p>按照特定的需要突出或去除图像中的某些信息</p><p>没有增加图像中的信息量，有可能损失</p><p>没有统一的客观评价标准，特定用途特定方法</p></blockquote><p><strong>如何进行图像增强</strong></p><blockquote><p>通过灰度变换，使得人眼视觉敏感区有灰度级分布</p></blockquote><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854067.png" alt="image-20240315121808223"></p><p>主要方法有：灰度变换、平均代数运算、空间域滤波、频域滤波</p><p>灰度变换、代数运算、空间域滤波直接对像素的灰度级进行操作 — <strong>空间域增强</strong></p><p>频域滤波，图像经过傅里叶变换等，对变换后的系数进行操作 — <strong>频域增强</strong></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854080.png" alt="image-20240315122144072"></p><h3 id="一、空间域增强"><a href="#一、空间域增强" class="headerlink" title="一、空间域增强"></a>一、空间域增强</h3><p>直接对构成图像像素的灰度级操作</p><p>T：对输入图像灰度级的变换（操作）</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854184.png" alt="image-20240315135605655"></p><h4 id="灰度变换"><a href="#灰度变换" class="headerlink" title="灰度变换"></a>灰度变换</h4><p>简单、常用的空间域图像增强方法，输入图像像素的灰度级进行变换</p><p>T：灰度变换函数（线性&#x2F;非线性）</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854287.png" alt="image-20240315135750032"></p><h5 id="1、线性变换"><a href="#1、线性变换" class="headerlink" title="1、线性变换"></a>1、线性变换</h5><p>这里是反转的效果：</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854389.png" alt="image-20240315140012783"></p><p>因为 $d&gt;b$ ，相当于把窄的灰度级拉伸了，这里起到了拉伸的效果：</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854807.png" alt="image-20240315185109310"></p><p>对很暗和很亮的地方进行灰度压缩，敏感区拉伸，</p><p>突出感兴趣的区间，相对抑制不感兴趣的灰度区域：</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854904.png" alt="image-20240315185748512"></p><h5 id="2、非线性变换"><a href="#2、非线性变换" class="headerlink" title="2、非线性变换"></a>2、非线性变换</h5><blockquote><p>包括对数变换、幂次变换、直方图均衡</p></blockquote><ul><li><p>对数变换</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854785.png" alt="image-20240315190049918"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854752.png" alt="image-20240315190115811"></p></li><li><p>幂次变换</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854091.png" alt="image-20240315190143138"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854066.png" alt="image-20240315190213255"></p><p>实际上对窄带也会进行拉伸：</p><p>低灰度输入图像 — 》 宽带 输出图像</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854356.png" alt="image-20240315190237938"></p><p>不同参数效果不同：</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854492.png" alt="image-20240315190404061"></p></li><li><p>直方图均衡</p></li></ul><blockquote><p>直方图统计每个灰度级上的像素个数</p></blockquote><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854443.png" alt="image-20240315191556996"></p><p>灰度变换后的图像直方图，是变换前直方图与变换函数导数之比</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854680.png" alt="image-20240315192627621"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854866.png" alt="image-20240315192705656"></p><p>如何实现直方图均衡？</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854711.png" alt="image-20240315192749186"></p><p>计算常数：总像素数除以灰度级别数量</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854036.png" alt="image-20240315193434524"></p><p>目的是找到$f$(D<sub>A</sub>)​</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854025.png" alt="image-20240315195623929"></p><p>示例：</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854111.png" alt="image-20240315195940437"></p><p>应用：</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854365.png" alt="image-20240315200034466"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854461.png" alt="image-20240315200125815"></p><h4 id="代数运算"><a href="#代数运算" class="headerlink" title="代数运算"></a>代数运算</h4><h5 id="1、加法运算"><a href="#1、加法运算" class="headerlink" title="1、加法运算"></a>1、加法运算</h5><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854468.png" alt="image-20240315200308426"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854618.png" alt="image-20240315200352448"></p><p>如何恢复原始图像$f(x,y)$？ — 求多幅图像均值可以去除叠加性噪声</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854007.png" alt="image-20240315200631436"></p><p>一般求平均的图像越多，去噪效果越好：</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854791.png" alt="image-20240315200814661"></p><h5 id="2、减法运算"><a href="#2、减法运算" class="headerlink" title="2、减法运算"></a>2、减法运算</h5><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854103.png" alt="image-20240315201005019"></p><p>分割特定区域：</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854025.png" alt="image-20240315205320059"></p><p>检测场景变化：</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854269.png" alt="image-20240315205353116"></p><h5 id="3、乘法运算"><a href="#3、乘法运算" class="headerlink" title="3、乘法运算"></a>3、乘法运算</h5><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854180.png" alt="image-20240315205422361"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854005.png" alt="image-20240315205434731"></p><h4 id="空间域滤波"><a href="#空间域滤波" class="headerlink" title="空间域滤波"></a>空间域滤波</h4><blockquote><p>空间域增强是直接对构成图像像素的灰度级操作</p><p>关键是寻求从输入图像到输出图像的变换函数 T </p><p>（上面提到了灰度变换函数，其实也可以通过信号系统分析寻找变换关系）</p></blockquote><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854533.png" alt="image-20240315205601120"></p><h5 id="信号与系统分析"><a href="#信号与系统分析" class="headerlink" title="信号与系统分析"></a>信号与系统分析</h5><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854598.png" alt="image-20240315205741195"></p><p><strong>（1）一维连续线性时不变系统</strong></p><p>一维连续线性时不变系统是指在一维输入和输出场景下，系统具有线性性质并且其参数不随时间变化。</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854728.png" alt="image-20240315222829812"></p><p><strong>（2）一维离散线性时不变系统</strong></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854051.png" alt="image-20240315230046412"></p><p>图像 — 》 二维离散系统</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854849.png" alt="image-20240315230123154"></p><p><strong>空间域滤波</strong></p><p>增强效果取决于$h(m,n)$</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854167.png" alt="image-20240315230216862"></p><h5 id="均值滤波器"><a href="#均值滤波器" class="headerlink" title="均值滤波器"></a>均值滤波器</h5><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854209.png" alt="image-20240315231331824"></p><p>经过均值滤波，噪声点削弱：</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854288.png" alt="image-20240315231506352"></p><h5 id="高斯滤波器"><a href="#高斯滤波器" class="headerlink" title="高斯滤波器"></a>高斯滤波器</h5><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854482.png" alt="image-20240315231542767"></p><p>图像滤波器应用 — 》 去除噪声</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854773.png" alt="image-20240315231854870"></p><p>图像滤波器应用 — 》 提取感兴趣物体</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854730.png" alt="image-20240315232209812"></p><p>低通滤波 — 》 图像平滑</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854813.png" alt="image-20240315232239456"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854916.png" alt="image-20240321141526883"></p><h5 id="中值滤波器"><a href="#中值滤波器" class="headerlink" title="中值滤波器"></a>中值滤波器</h5><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854903.png" alt="image-20240321141642363"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854042.png" alt="image-20240321141714753"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854452.png" alt="image-20240321141737866"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854506.png" alt="image-20240321141746237"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854487.png" alt="image-20240321141751579"></p><h5 id="高通滤波器"><a href="#高通滤波器" class="headerlink" title="高通滤波器"></a>高通滤波器</h5><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854597.png" alt="image-20240321142130392"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854518.png" alt="image-20240321142140425"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854642.png" alt="image-20240321142233980"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854137.png" alt="image-20240321142545373"></p><p><strong>图像边缘</strong></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403211428113.png" alt="image-20240321142810067"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854239.png" alt="image-20240321142834228"></p><p><strong>基于一阶差分的图像增强</strong></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403211429598.png" alt="image-20240321142924540"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854349.png" alt="image-20240321143007106"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854502.png" alt="image-20240321143037299"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854871.png" alt="image-20240321143054217"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854084.png" alt="image-20240321143101084"></p><p><strong>基于二阶差分的图像增强</strong></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854224.png" alt="image-20240321143138941"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854303.png" alt="image-20240321143203584"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854586.png" alt="image-20240321143211071"></p><p><strong>一阶差分与二阶差分的区别</strong></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854823.png" alt="image-20240321143312664"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854327.png" alt="image-20240321143334420"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854107.png" alt="image-20240321143352892"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854385.png" alt="image-20240321143417116"></p><h3 id="二、频域增强"><a href="#二、频域增强" class="headerlink" title="二、频域增强"></a>二、频域增强</h3><h4 id="一维离散傅里叶变换定义"><a href="#一维离散傅里叶变换定义" class="headerlink" title="一维离散傅里叶变换定义"></a>一维离散傅里叶变换定义</h4><p>傅里叶级数</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854538.png" alt="image-20240321164147630"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854979.png" alt="image-20240321164231072"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854076.png" alt="image-20240321164242383"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854118.png" alt="image-20240321164323604"></p><h4 id="二维离散傅里叶变换定义"><a href="#二维离散傅里叶变换定义" class="headerlink" title="二维离散傅里叶变换定义"></a>二维离散傅里叶变换定义</h4><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854243.png" alt="image-20240321164343891"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854669.png" alt="image-20240321164403481"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854734.png" alt="image-20240321164418029"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854798.png" alt="image-20240321164437280"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854983.png" alt="image-20240321164448740"></p><h4 id="二维离散傅里叶变换性质"><a href="#二维离散傅里叶变换性质" class="headerlink" title="二维离散傅里叶变换性质"></a>二维离散傅里叶变换性质</h4><p>平移特性</p><p>旋转特性</p><p>尺度特性</p><p>卷积特性</p><p>相关特性</p><p>分离特性</p><h4 id="图像滤波器"><a href="#图像滤波器" class="headerlink" title="图像滤波器"></a>图像滤波器</h4><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854251.png" alt="image-20240321173425623"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854337.png" alt="image-20240321173440500"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854379.png" alt="image-20240321173453913"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854649.png" alt="image-20240321173521448"></p><p>（略）</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854881.png" alt="image-20240321173611828"></p><p>（略）</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854910.png" alt="image-20240321173810870"></p><p>（略）</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854149.png" alt="image-20240321173832195"></p><p>（略）</p><h2 id="Ⅲ-形态学处理"><a href="#Ⅲ-形态学处理" class="headerlink" title="Ⅲ 形态学处理"></a>Ⅲ 形态学处理</h2><h3 id="一、基本概念"><a href="#一、基本概念" class="headerlink" title="一、基本概念"></a>一、基本概念</h3><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854739.png" alt="image-20240325174221566"></p><p><strong>图像数学形态学处理</strong></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854510.png" alt="image-20240325174305792"></p><h3 id="二、集合论基础"><a href="#二、集合论基础" class="headerlink" title="二、集合论基础"></a>二、集合论基础</h3><p>集合论</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854562.png" alt="image-20240325174343623"></p><p>集合论运算：交集、并集、补集、差集</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854805.png" alt="image-20240325174454038"></p><p>集合平移：</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854182.png" alt="image-20240325174604773"></p><p>集合反射：</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854267.png" alt="image-20240325174636894"></p><h3 id="三、数学形态学处理"><a href="#三、数学形态学处理" class="headerlink" title="三、数学形态学处理"></a>三、数学形态学处理</h3><h4 id="膨胀"><a href="#膨胀" class="headerlink" title="膨胀"></a>膨胀</h4><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854316.png" alt="image-20240325174901048"></p><p>最后的结果是点集</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854364.png" alt="image-20240325175926717"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854684.png" alt="image-20240325180303531"></p><p>对字符进行低通滤波或者膨胀</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854925.png" alt="image-20240325180452997"></p><h4 id="腐蚀"><a href="#腐蚀" class="headerlink" title="腐蚀"></a>腐蚀</h4><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854872.png" alt="image-20240325181258767"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854899.png" alt="image-20240325181322439"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854131.png" alt="image-20240325181446238"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854784.png" alt="image-20240325181500973"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854490.png" alt="image-20240325181531517"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854155.png" alt="image-20240325181544426"></p><p>应用：</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854541.png" alt="image-20240325181612562"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854091.png" alt="image-20240325181630310"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854118.png" alt="image-20240325181709937"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854472.png" alt="image-20240325181718368"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854644.png" alt="image-20240325181735572"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854702.png" alt="image-20240325181849399"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854677.png" alt="image-20240325181854134"></p><h4 id="开运算"><a href="#开运算" class="headerlink" title="开运算"></a>开运算</h4><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854111.png" alt="image-20240325181918125"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854185.png" alt="image-20240325181953511"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854200.png" alt="image-20240325182016240"></p><h4 id="闭运算"><a href="#闭运算" class="headerlink" title="闭运算"></a>闭运算</h4><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854268.png" alt="image-20240325182032148"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854691.png" alt="image-20240325182040587"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854735.png" alt="image-20240325182054950"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854840.png" alt="image-20240325182129744"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854792.png" alt="image-20240325182154074"><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854243.png" alt="image-20240325182250762"></p><h2 id="Ⅳ-图像分割"><a href="#Ⅳ-图像分割" class="headerlink" title="Ⅳ 图像分割"></a>Ⅳ 图像分割</h2><p>感兴趣区域识别</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854231.png" alt="image-20240325183100012"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854217.png" alt="image-20240325183136453"></p><p>（后面的图有点密恐！！！！！小心！！！！）</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854222.png" alt="image-20240325183206679"></p><h3 id="基于阈值"><a href="#基于阈值" class="headerlink" title="基于阈值"></a>基于阈值</h3><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854475.png" alt="image-20240325183252292"></p><p>确定阈值T，大于T保留，小于T视为0</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854554.png" alt="image-20240325183829994">、</p><p>阈值的选取:</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854849.png" alt="image-20240325183841551"></p><p>直方图技术：</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854937.png" alt="image-20240325183904512"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854927.png" alt="image-20240325183928904"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854803.png"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854086.png" alt="image-20240325184017714"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854060.png" alt="image-20240325184031251"></p><p>最小误差阈值法（略）</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854391.png" alt="image-20240325184058657"></p><p>最大方差阈值法（略）</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854545.png" alt="image-20240325184145549"></p><h3 id="基于边缘"><a href="#基于边缘" class="headerlink" title="基于边缘"></a>基于边缘</h3><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854538.png" alt="image-20240325183318662"></p><p>点检测：</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854750.png" alt="image-20240325184233339"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854686.png" alt="image-20240325184243150"></p><p>线检测：</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854003.png" alt="image-20240325184252957"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854092.png" alt="image-20240325184303083"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854128.png" alt="image-20240325184314742"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854392.png" alt="image-20240325184332650"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854313.png" alt="image-20240325184338680"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854463.png" alt="image-20240325184352638"></p><p>霍夫变换：</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854748.png" alt="image-20240325184420751"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854669.png" alt="image-20240325184428657"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854243.png" alt="image-20240325184442342"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854012.png" alt="image-20240325184451158"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854020.png" alt="image-20240325184500442"></p><h3 id="基于区域"><a href="#基于区域" class="headerlink" title="基于区域"></a>基于区域</h3><p>（略）</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854158.png" alt="image-20240325183338037"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854295.png" alt="image-20240325184518642"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854446.png" alt="image-20240325184526153"></p><h3 id="基于学习"><a href="#基于学习" class="headerlink" title="基于学习"></a>基于学习</h3><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403251854609.png" alt="image-20240325183405862"></p>]]></content>
    
    
    <categories>
      
      <category>图像处理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>图像增强</tag>
      
      <tag>图像形态学处理</tag>
      
      <tag>图像分割</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>迪AI-神经网络基础学习</title>
    <link href="/2024/03/23/%E8%BF%AAAI-%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
    <url>/2024/03/23/%E8%BF%AAAI-%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="迪AI-神经网络基础学习"><a href="#迪AI-神经网络基础学习" class="headerlink" title="迪AI-神经网络基础学习"></a>迪AI-神经网络基础学习</h1><h2 id="一、神经网络"><a href="#一、神经网络" class="headerlink" title="一、神经网络"></a>一、神经网络</h2><p><strong>机器学习流程：</strong></p><blockquote><p>数据获取 — 特征工程（核心）— 建立模型 — 评估与应用</p></blockquote><p><strong>特征工程的作用：</strong></p><ul><li><p>数据特征决定了模型的上限</p></li><li><p>预处理和特征提取是最核心的</p></li><li><p>算法和参数选择决定了如何逼近这个上限</p></li></ul><p><strong>特征如何提取？</strong></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947883.png" alt="image-20240321195233298"></p><p><strong>传统特征提取方法：</strong></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947563.png" alt="image-20240321195318340"></p><p><strong>深度学习</strong></p><p>比较麻烦，这就是为什么需要深度学习：</p><p>相当于黑盒子，通过学习提取一系列最合适的特征：</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947518.png" alt="image-20240321195433086"></p><p>深度学习的应用：无人驾驶（目标检测和识别）、人脸识别、医学应用、视频换脸、图像修复</p><p><strong>数据集IMAGENET：</strong></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947941.png" alt="image-20240321202043785"></p><p>数据规模越大，深度学习算法效果越好：</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947619.png" alt="image-20240321202214294"></p><p><strong>计算机视觉-图像分类任务</strong></p><p>3颜色通道RGB</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947592.png" alt="image-20240321202335768"></p><p><strong>面临的挑战：</strong></p><p>照射角度、形状改变、部分遮蔽、背景混入</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947165.png" alt="image-20240321202448792"></p><p><strong>机器学习常规套路</strong></p><ul><li>收集数据、给定标签</li><li>训练一个分类器</li><li>测试、评估</li></ul><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947271.png" alt="image-20240321202638832"></p><p><strong>K近邻</strong></p><p>问圆圈属于什么类别？看周围的类别谁多分类成谁</p><p>K等于几就是画几个在圈里：</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947253.png" alt="image-20240321203518694"></p><p>计算流程：</p><ul><li>计算已知类别数据集中的点与当前点距离</li><li>按照距离依次排序</li><li>选取与当前点距离最小的K个点</li><li>确定前K个点所在类别的出现频率</li><li>返回前K个点出现频率最高的类别作为当前点预测分类</li></ul><p>K近邻分析：</p><ul><li><p>KNN算法简单有效，是一种lazy-learning算法</p></li><li><p>分类器不需要使用训练集进行训练，训练时间复杂度为0</p></li><li><p>KNN分类的计算复杂度和训练集中的文档数目成正比，也就是说，如果训练集中的文档总数为n，那么KNN的分类时间复杂度为O(n)</p></li><li><p>K值的选择，距离度量和分类决策规则是该算法的三个基本要素</p></li></ul><p><strong>CIFAR-10 数据库简介：</strong></p><p>数据小，32x32x3</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947518.png" alt="image-20240321205957826"></p><p><strong>距离计算：</strong></p><p>和训练集中的5w张图像，分别逐像素相减，取绝对值，然后求和</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947881.png" alt="image-20240321210509541"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947138.png" alt="image-20240321210703137"></p><p>问题：没有区分主体和背景</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947053.png" alt="image-20240321211446688"></p><p><strong>交叉验证：</strong></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947044.png" alt="image-20240321210809493"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947909.png" alt="image-20240321210904342"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947574.png" alt="image-20240321211248857"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947664.png" alt="image-20240321210924072"></p><p><strong>神经网络基础</strong></p><p>线性函数，从输入到输出的映射</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947195.png" alt="image-20240321212441827"></p><p><strong>数学表示：</strong></p><p>计算属于每个类别对应的得分，每种动物有自己的权重W，因此W要有10个</p><p>3072由32x32x3得到，每个类别在每个像素点的权重参数</p><p>b是微调，是偏置参数，对于10个类别得到的分数都要进行微调</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947825.png" alt="image-20240321213137771"></p><p><strong>计算方法：</strong></p><p>权重参数越大，表明相应的像素越重要</p><p> <img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947272.png" alt="image-20240321213340108"></p><p><strong>W如何得到的？</strong></p><p>X数据是不会变的，因此神经网络是寻找合适的W</p><p>W初始是随机的，根据某些优化方法，不断改进W</p><p><strong>决策边界</strong></p><p>W是控制着决策边界的，b只是做微调</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947201.png" alt="image-20240321213812143"></p><p><strong>损失函数</strong></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947308.png" alt="image-20240321213939143"></p><p>损失函数为0的时候 等于没有损失</p><p>用错误类别的分数减去正确类别的分数</p><p>+1的作用 相当于容忍程度 错误类别的分数和正确类别的差距至少要大于1分</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403212140249.png" alt="image-20240321214028180"></p><p>不是 模型A和模型B关注的不一样 </p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947599.png" alt="image-20240322000626595"></p><p><strong>正则化：</strong></p><p>惩罚项，由权重参数带来的损失</p><p>λ为惩罚系数，λ越大表示不希望过拟合，正则化惩罚更大，如果小点就是意思意思一下</p><p>因为神经网络的缺点就是过于强大，过拟合的风险很大</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947768.png" alt="image-20240322000825710"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947775.png" alt="image-20240322004702274"></p><p><strong>Softmax分类器</strong></p><p>随意输入一个数x都可以压缩到0-1之间，恰好把分数转化成了概率值</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947957.png" alt="image-20240322004755210"></p><p>将分数x做exp操作，放大差异，转化为概率值就是做归一化：</p><p>就是把自己的分数除以所有分数的和</p><p>归一化之后，用对数函数求损失，希望正确类别的概率离1越近越好 而损失值就越小</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947911.png" alt="image-20240322005341917"></p><p>回归任务 – 得分值</p><p>分类任务 – 概率值</p><p><strong>前向传播</strong></p><p>由x和w怎么得到一个损失</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947178.png" alt="image-20240322005555783"></p><p><strong>反向传播</strong></p><p>根据loss调整w</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947500.png" alt="image-20240322005627191"></p><p>在前向传播中，得分函数往往是多次变换组合，多个W一起去做 ，每一步关注的不一样</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947494.png" alt="image-20240322151332773"></p><p><strong>梯度下降：</strong></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947437.png"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947589.png"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947866.png" alt="image-20240322152145853"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947172.png" alt="image-20240322152213537"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947491.png" alt="image-20240322152302055"></p><p>希望损失函数的值越低越好 分别求偏导（相当于对结果做了多少贡献）</p><p>先是f对z求偏导 就知道z对结果的影响</p><p>而x经过了2步，先让f对q做偏导 再乘以q对x求的偏导 — 链式求导</p><p>y同理 逐层计算</p><p>反向传播中就是逐层计算</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947540.png" alt="image-20240322152647722"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947883.png" alt="image-20240322152714770"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947449.png" alt="image-20240322152758276"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947836.png" alt="image-20240322152806729"></p><p>可以</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947997.png" alt="image-20240322155459089"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947129.png" alt="image-20240322155603832"></p><p><strong>整体架构：</strong></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947135.png" alt="image-20240322162532669"></p><ul><li><p>层次结构：一层一层办事，在前者的基础上做事</p></li><li><p>神经元： 输入数据的特征数 有多少圈代表有多少输入特征</p></li><li><p>全连接：每个圆圈都连在一起</p></li><li><p>中间层：人类不好理解 计算机可以 </p></li><li><p>权重：线条就是权重 把3个特征转换到4个特征 权重参数 [3,4]</p></li></ul><p>W1 W2W3</p><ul><li>非线性：在每一步矩阵计算后的激活函数</li></ul><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947662.png" alt="image-20240322162850601"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947633.png" alt="image-20240322163512866"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947789.png" alt="image-20240322163522369"></p><p>神经元个数对结果的影响：理论上越多越好，但是出现过拟合</p><p>增加一个神经元、实际上是增加了一组参数</p><p><strong>正则化的作用：</strong></p><p>惩罚力度越小，越符合训练的结果。加大惩罚力度，要平滑的多</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947776.png" alt="image-20240322213718026"></p><p><strong>参数个数对结果的影响：</strong></p><p>神经元个数就是希望转化的特征数量，常见的是64 128 256…</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947434.png" alt="image-20240322213939919"></p><p><strong>激活函数：</strong></p><p>就是非线性变换</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947664.png" alt="image-20240322214049262"></p><p>sigmoid极端处会出现梯度消失 如果梯度为0 会导致后续的梯度也为0 因为是乘法操作</p><p>Relu更实用 没有梯度消失现象</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947022.png" alt="image-20240322220832806"></p><p><strong>数据预处理：</strong></p><p>数据要做预处理 例如中心化（减去均值）、归一化（除以标准差）</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947442.png" alt="image-20240323105624533"></p><p><strong>参数初始化：</strong></p><p>权重参数矩阵给随机的值 随机策略 生成随机参数</p><p>0.01 初始化结果就都比较小</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947493.png" alt="image-20240323105606217"></p><p>防止过拟合，还可以使用<strong>DROP-OUT:</strong></p><p>完整的神经网络 全连接 B图就是在训练中 每一层随机杀死神经元 每次训练都是随机选择一部分</p><p>每次训练 架构都简单些 </p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947134.png" alt="image-20240323111955383"></p><p><strong>神经网络：</strong></p><p>就是找权重参数 什么权重参数最适合网络</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947149.png" alt="image-20240323112247340"></p><p>​                                              </p><h2 id="二、卷积神经网络CNN"><a href="#二、卷积神经网络CNN" class="headerlink" title="二、卷积神经网络CNN"></a>二、卷积神经网络CNN</h2><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947169.png" alt="image-20240323113605752"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947509.png" alt="image-20240323113709657"></p><p><strong>检索：</strong>判断图片是什么 再寻找相似度高的图片出来</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947827.png" alt="image-20240323113717080"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947057.png" alt="image-20240323113814780"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947516.png" alt="image-20240323113827821"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947008.png" alt="image-20240323113840520"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947334.png" alt="image-20240323113922498"></p><p><strong>卷积与传统神经网络nn的区别</strong>：</p><p>输入数据不是一列向量 是三维的 长方体</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947538.png" alt="image-20240323113955554"></p><p><strong>卷积：</strong>提取特征 </p><p><strong>池化：</strong>压缩特征</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947724.png" alt="image-20240323114107526"></p><p><strong>卷积做了什么？</strong></p><ul><li><p>把一张图像分成很多份，比如猫的眼睛 鼻子 嘴 不同的地方进行处理</p></li><li><p>每一块不止一个像素点 例如3x3的区域 对当前区域使用权重参数得到特征值</p></li><li><p>不同区域得到的特征不一样 选择一种计算方法 计算每个区域的特征值</p></li><li><p>找最好的权重参数 最适合的权重参数</p></li></ul><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947738.png" alt="image-20240323120136530"></p><p><strong>图像颜色通道：</strong></p><p>做计算的时候，每个颜色通道都要分别计算 – RGB</p><p>最后要进行加法操作 把3个通道的结果加起来</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947062.png" alt="image-20240323120351228"></p><p><strong>Filter的通道数</strong>必须和输入数据的通道数相同 </p><p><strong>核：</strong>就是选择多大的区域对应于一个特征值</p><p>做的是内积计算 各元素相乘 每个通道做内积最后加起来得到一个特征值 记得加上b偏置</p><p>最终是得到一个特征图</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947371.png" alt="image-20240323120847575"></p><p>核可以是多个 f1-f6 得到丰富的特征 <strong>结果的通道数就是特征图的个数</strong></p><p>同一个卷积层 核的大小必须是相同的</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947385.png" alt="image-20240323123639001"></p><p>卷积得到的特征图再做卷积</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947481.png" alt="image-20240323124033635"></p><p>6个卷积核 卷积核的通道数一定和输入数据的通道数相同</p><p>10个卷积核 </p><p>…</p><p>经过多次卷积提取有用的特征</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947480.png" alt="image-20240323131330271"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947915.png" alt="image-20240323131749989"></p><p><strong>不同步长</strong>得到的特征图大小不一样</p><p>步长比较小的时候 细粒度越高  特征图更丰富</p><p>图像任务的时候步长一般为1  效率比较低</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947933.png" alt="image-20240323131800029"></p><p><strong>卷积核尺寸</strong>是选择区域的大小 卷积核越小 细粒度越高 </p><p>因为卷积的时候 边界点没有中间点利用的次数多  因此通过填充 让边界信息利用充分</p><p>用0填充 不会对结果产生负面影响</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947052.png" alt="image-20240323132346943"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947004.png" alt="image-20240323132522253"></p><p><strong>卷积核个数</strong> 对应的是得到的特征图的个数</p><p><strong>计算：</strong></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947670.png" alt="image-20240323132728711"></p><p>H1 原始输入 FH 是核的高度 P是padding 填充0的圈数</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947643.png" alt="image-20240323132708946"></p><p><strong>例子：</strong></p><p>特征图大小可能不变</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947983.png" alt="image-20240323143545183"></p><p><strong>卷积参数共享：</strong></p><p>每个卷积区域 用相同的核</p><p>每一个卷积核有一个对应的偏置参数</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947013.png" alt="image-20240323144202538"></p><p><strong>池化：</strong></p><p>压缩作用 进行筛选 通道数不变 宽高可以改变</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947226.png" alt="image-20240323144555454"></p><p><strong>最大池化：（常用）</strong></p><p>每个区域选择最大值</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947322.png" alt="image-20240323144656961"></p><p><strong>平均池化：</strong></p><p>每个区域求平均值</p><p><strong>卷积神经网络：</strong></p><p>卷积层+激活函数是一个必须的组合</p><p>两次卷积、一个池化…</p><p><strong>如何将特征图长方体进行分类任务？</strong>还得是全连接层。</p><p>拉成特征向量，输入到全连接层，得到分类结果</p><p><strong>通常是带参数计算的 叫做一层（卷积层、全连接层）</strong></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947695.png" alt="image-20240323144807170"></p><p><strong>特征图变化：</strong></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947687.png" alt="image-20240323145055610"></p><p><strong>经典网络：</strong></p><ul><li><strong>ALEXNET</strong></li></ul><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947899.png" alt="image-20240323145543624"></p><p>pool之后 会损失信息 用特征图个数弥补损失 翻倍了</p><ul><li><strong>VGG</strong></li></ul><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947914.png" alt="image-20240323145620441"></p><p>用更深的网络层数去做 效果不一定更好</p><ul><li><strong>RESNET</strong></li></ul><p>利用同等映射 如果表现不好 如果B不好 把B的权重参数全部置为0 A和C直接连接</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947893.png" alt="image-20240323145823746"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947401.png" alt="image-20240323150116911"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947446.png" alt="image-20240323150137949"></p><p><strong>任务是分类还是回归 取决于损失函数和最后的连接</strong></p><p>把resnet当做特征提取 是一种通用的网络结构</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947597.png" alt="image-20240323150220415"></p><p><strong>感受野：</strong></p><p>无论中间多少层 最后感受到的是原始输入的野</p><p>最后的值是前面多少个值得到的</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947022.png" alt="image-20240323150342629"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947604.png" alt="image-20240323162233484"></p><p>为什么：</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947589.png" alt="image-20240323162548862"></p><h2 id="三、递归神经网络RNN"><a href="#三、递归神经网络RNN" class="headerlink" title="三、递归神经网络RNN"></a>三、递归神经网络RNN</h2><p>预测结果的时候 可以把中间和前面的结果考虑进来</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947095.png" alt="image-20240323164311174">CNN 主要用于计算机视觉</p><p>RNN 主要用于自然语言处理</p><p>不同时刻，人为区分的，h0 h1 h2..代表中间结果</p><p>ht表示综合之前所有特征 一般只选最后结果</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947122.png" alt="image-20240323165912756"></p><h2 id="四、LSTM网络"><a href="#四、LSTM网络" class="headerlink" title="四、LSTM网络"></a>四、LSTM网络</h2><p>RNN网络记忆好 把之前所有结果记忆下来</p><p>LSTM可以健忘一些 </p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947305.png" alt="image-20240323170019110"></p><p>C决定保留和遗忘</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947270.png" alt="image-20240323170034459"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947326.png" alt="image-20240323170042587"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947857.png" alt="image-20240323170059371"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947862.png" alt="image-20240323170108477"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947616.png" alt="image-20240323170153092"></p><p>LSTM是在RNN基础上改进的，加上了C控制参数，控制当前模型复杂度</p><p>可以进行信息的过滤</p><p><strong>架构：</strong></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947963.png" alt="image-20240323170310004"></p><h2 id="五、自然语言处理-词向量模型-Word2Vec"><a href="#五、自然语言处理-词向量模型-Word2Vec" class="headerlink" title="五、自然语言处理-词向量模型-Word2Vec"></a>五、自然语言处理-词向量模型-Word2Vec</h2><p>文本向量化后计算机才认识</p><p>基本的出发点：构建词向量</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947113.png" alt="image-20240323174458965"></p><p>通常，数据的维度越高，能提供的信息也就越多，从而计算结果的可靠性就更值得信赖（50-300维）</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947153.png" alt="image-20240323174546034"></p><p>50维 很难解释 只有计算机认识</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947433.png" alt="image-20240323174807095"></p><p><strong>热度图：</strong></p><p>相近的词位置是相似的</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947503.png" alt="image-20240323174842511"></p><p>如何训练词向量？— 词要如何写成一个向量</p><p>预测下一个词</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947689.png" alt="image-20240323175120105"></p><p>和神经网络的多分类挺像的 预测下一个词哪个词的概率更高</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947672.png" alt="image-20240323175448074"></p><p>先把词在词库中匹配向量 随机初始向量组 然后迭代更新输入变量使损失更小 能够更精准预测下一个词</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947042.png" alt="image-20240323175750416"></p><p><strong>训练数据：</strong></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947079.png" alt="image-20240323180029606"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947106.png" alt="image-20240323180151241"></p><p>平移 指定滑动窗口 扫描 得到输入输出</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947168.png" alt="image-20240323180210049"></p><p><strong>不同模型对比：</strong></p><ul><li><strong>CBOW</strong></li></ul><p>输入是上下文，输出中间的词</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947182.png" alt="image-20240323180806133"></p><p>t是输出：</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947585.png" alt="image-20240323180826507"></p><ul><li><strong>Skipgram</strong></li></ul><p>输入是中间的词 输出是上下文的预测</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947708.png" alt="image-20240323180856994"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947660.png" alt="image-20240323180939569"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947736.png" alt="image-20240323181000582"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947748.png" alt="image-20240323181025369"></p><p>不仅要更新权重 还要更新数据</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947046.png" alt="image-20240323183800079"></p><p>庞大的语言库 最终希望得到的正确分类概率越高越好 </p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947096.png" alt="image-20240323181132200"></p><p>把原来的输出也放到输入</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947169.png" alt="image-20240323183908065"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947285.png" alt="image-20240323184013420"></p><p>自己添加标签 target为0的 负样本 人为创造的 推荐5个</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947380.png"></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947593.png"></p><p><strong>词向量训练过程：</strong></p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947604.png" alt="image-20240323184307862"></p><p>找对应的矩阵：</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947735.png" alt="image-20240323184444998"></p><p>in out都要进行更新的</p><p>最终得到词向量模型</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403231947819.png" alt="image-20240323184506669"></p>]]></content>
    
    
    <categories>
      
      <category>AI学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>神经网络</tag>
      
      <tag>CNN</tag>
      
      <tag>RNN</tag>
      
      <tag>LSTM</tag>
      
      <tag>Word2Vec</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode04：移动零</title>
    <link href="/2024/03/13/LeetCode04/"/>
    <url>/2024/03/13/LeetCode04/</url>
    
    <content type="html"><![CDATA[<h1 id="4-移动零"><a href="#4-移动零" class="headerlink" title="4.移动零"></a>4.移动零</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个数组 <code>nums</code>，编写一个函数将所有 <code>0</code> 移动到数组的末尾，同时保持非零元素的相对顺序。</p><p><strong>请注意</strong> ，必须在不复制数组的情况下原地对数组进行操作。</p><p><strong>示例 1:</strong></p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">输入: nums = <span class="hljs-string">[0,1,0,3,12]</span><br>输出: <span class="hljs-string">[1,3,12,0,0]</span><br></code></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入: nums = <span class="hljs-comment">[0]</span><br>输出: <span class="hljs-comment">[0]</span><br></code></pre></td></tr></table></figure><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="（1）我的解法"><a href="#（1）我的解法" class="headerlink" title="（1）我的解法"></a>（1）我的解法</h3><p>通过循环数组的<code>remove</code>操作依次将0移除，移除次数为填0次数，最后在数组末尾填充相应次数的0。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">moveZeroes</span>(<span class="hljs-params">self, nums</span>):<br>        count = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-number">0</span> <span class="hljs-keyword">in</span> nums:<br>            nums.remove(<span class="hljs-number">0</span>)<br>            count += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(count):<br>            nums.append(<span class="hljs-number">0</span>)                <br>        <span class="hljs-keyword">return</span> nums<br></code></pre></td></tr></table></figure><h3 id="（2）官方题解"><a href="#（2）官方题解" class="headerlink" title="（2）官方题解"></a>（2）官方题解</h3><h4 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h4><p>左右指针都在索引起始处，先判断右指针位置的元素是否为0，如果为0，右指针继续走一步；如果不为0，将左右指针的元素对换，左指针继续往前一步。右指针继续走一步，继续处理，直到右指针走到最末。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">moveZeroes</span>(<span class="hljs-params">self, nums</span>):<br>        n = <span class="hljs-built_in">len</span>(nums)<br>        left = right = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> right &lt; n:<br>            <span class="hljs-keyword">if</span> nums[right] != <span class="hljs-number">0</span>:<br>                nums[left], nums[right] = nums[right], nums[left]<br>                left += <span class="hljs-number">1</span><br>            right += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> nums<br></code></pre></td></tr></table></figure><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p><strong>双指针法的时间与空间复杂度</strong></p><blockquote><p>时间复杂度：O(n)，其中 n 为序列长度。每个位置至多被遍历两次。</p><p>空间复杂度：O(1)。只需要常数的空间存放若干变量。</p></blockquote><p><strong>双指针元素兑换</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">nums[left], nums[right] = nums[right], nums[left]<br></code></pre></td></tr></table></figure><p><strong>数组操作</strong></p><blockquote><ol><li>创建数组：使用方括号 <code>[]</code> 来创建数组，例如 <code>my_list = [1, 2, 3, 4, 5]</code>。</li><li>访问元素：通过索引来访问数组中的元素，索引从 0 开始，例如 <code>my_list[0]</code> 返回数组的第一个元素。</li><li>切片操作：可以使用切片来获取数组中的子数组，例如 <code>my_list[1:3]</code> 返回索引 1 到 2 的子数组。</li><li>添加元素：使用 <code>append()</code> 方法向数组末尾添加新元素，例如 <code>my_list.append(6)</code>。</li><li>插入元素：使用 <code>insert()</code> 方法在指定位置插入元素，例如 <code>my_list.insert(2, 7)</code> 在索引 2 处插入元素 7。</li><li>删除元素：使用 <code>remove()</code> 方法删除指定元素，例如 <code>my_list.remove(3)</code> 删除元素 3。</li><li>弹出元素：使用 <code>pop()</code> 方法弹出指定索引的元素，例如 <code>my_list.pop(1)</code> 弹出索引 1 处的元素。</li><li>查找元素：使用 <code>index()</code> 方法查找指定元素的索引，例如 <code>my_list.index(4)</code> 返回元素 4 的索引。</li><li>数组长度：使用 <code>len()</code> 函数获取数组的长度，例如 <code>len(my_list)</code> 返回数组的长度。</li><li>排序数组：使用 <code>sort()</code> 方法对数组进行排序，例如 <code>my_list.sort()</code> 对数组进行升序排序。</li></ol></blockquote>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>题库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PAT03：数素数</title>
    <link href="/2024/03/13/PAT03/"/>
    <url>/2024/03/13/PAT03/</url>
    
    <content type="html"><![CDATA[<h1 id="3-数素数"><a href="#3-数素数" class="headerlink" title="3.数素数"></a>3.数素数</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><strong>题目描述</strong></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">令Pi表示第i（i从<span class="hljs-number">1</span>开始计数）个素数。现任给两个正整数M &lt;<span class="hljs-operator">=</span> N &lt;<span class="hljs-operator">=</span> <span class="hljs-number">10000</span>，请输出PM到PN的所有素数。<br></code></pre></td></tr></table></figure><p><strong>输入描述:</strong></p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">输入在一行中给出M和<span class="hljs-built_in">N</span>，其间以空格分隔。<br></code></pre></td></tr></table></figure><p><strong>输出描述:</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">输出从PM到PN的所有素数，每10个数字占1行，其间以空格分隔，但行末不得有多余空格。<br></code></pre></td></tr></table></figure><p><strong>输入例子:</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">5 </span><span class="hljs-number">27</span><br></code></pre></td></tr></table></figure><p><strong>输出例子:</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">11 </span><span class="hljs-number">13</span> <span class="hljs-number">17</span> <span class="hljs-number">19</span> <span class="hljs-number">23</span> <span class="hljs-number">29</span> <span class="hljs-number">31</span> <span class="hljs-number">37</span> <span class="hljs-number">41</span> <span class="hljs-number">43</span><br><span class="hljs-symbol">47 </span><span class="hljs-number">53</span> <span class="hljs-number">59</span> <span class="hljs-number">61</span> <span class="hljs-number">67</span> <span class="hljs-number">71</span> <span class="hljs-number">73</span> <span class="hljs-number">79</span> <span class="hljs-number">83</span> <span class="hljs-number">89</span><br><span class="hljs-symbol">97 </span><span class="hljs-number">101</span> <span class="hljs-number">103</span><br></code></pre></td></tr></table></figure><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="1-我的解法"><a href="#1-我的解法" class="headerlink" title="(1)我的解法"></a>(1)我的解法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">suShu</span>(<span class="hljs-params">num</span>):<br>    <span class="hljs-keyword">if</span> num &lt;= <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    n = <span class="hljs-built_in">int</span>(num**<span class="hljs-number">0.5</span>) + <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,n+<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> num % i == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> num != i:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span> <br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">outNum</span>(<span class="hljs-params">nums</span>):<br>    <span class="hljs-keyword">for</span> i,num <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(nums,start=<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> i % <span class="hljs-number">10</span> == <span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">print</span>(num)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">if</span> i == <span class="hljs-built_in">len</span>(nums):<br>                <span class="hljs-built_in">print</span>(num,end=<span class="hljs-string">&#x27;&#x27;</span>)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span>(num,end=<span class="hljs-string">&#x27; &#x27;</span>)<br>    <br><br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> sys.stdin:<br>    res = []<br>    m,n = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,line.split())<br>    num = <span class="hljs-number">1</span><br>    count = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        num += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> suShu(num):<br>            count += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> m&lt;=count&lt;=n:<br>                res.append(num)<br>            <span class="hljs-keyword">elif</span> count &gt; n:<br>                <span class="hljs-keyword">break</span><br>    outNum(res)<br><br></code></pre></td></tr></table></figure><h3 id="（2）其他解法"><a href="#（2）其他解法" class="headerlink" title="（2）其他解法"></a>（2）其他解法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> sqrt<br><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">isPrime</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-built_in">int</span>(sqrt(x))+<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> x % i == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> sys.stdin:<br>    no = line.split(<span class="hljs-string">&#x27; &#x27;</span>)<br>    m, n = <span class="hljs-built_in">int</span>(no[<span class="hljs-number">0</span>]), <span class="hljs-built_in">int</span>(no[<span class="hljs-number">1</span>])<br>    i,count = <span class="hljs-number">2</span>,<span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> count &lt; n :<br>        <span class="hljs-keyword">if</span> isPrime(i):<br>            count += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> count &gt;= m:<br>                <span class="hljs-keyword">if</span> (count-m+<span class="hljs-number">1</span>)%<span class="hljs-number">10</span> != <span class="hljs-number">0</span>:<br>                    <span class="hljs-built_in">print</span>(i,end=<span class="hljs-string">&#x27; &#x27;</span>),<br>                <span class="hljs-keyword">else</span> :<br>                    <span class="hljs-built_in">print</span>(i)<br>        i += <span class="hljs-number">1</span><br><br></code></pre></td></tr></table></figure><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p><strong>素数（质数）</strong></p><blockquote><p>指在大于1的<a href="https://baike.baidu.com/item/%E8%87%AA%E7%84%B6%E6%95%B0/385394?fromModule=lemma_inlink">自然数</a>中，除了1和它本身以外不再有其他<a href="https://baike.baidu.com/item/%E5%9B%A0%E6%95%B0/9539111?fromModule=lemma_inlink">因数</a>的自然数。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">isPrime</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-built_in">int</span>(sqrt(x))+<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> x % i == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><p><strong>打印分隔符</strong></p><blockquote><p>打印结束时使用的行尾符号，默认是换行符 <code>\n</code>。</p></blockquote><p><code>sep</code>是间隔中有符号，末尾不会有符号</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(item1, item2, item3, sep=<span class="hljs-string">&#x27; 分隔符 &#x27;</span>)<br></code></pre></td></tr></table></figure><p><code>end</code>是每个元素后面都有符号，末尾也会有</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(item1, item2, end=<span class="hljs-string">&#x27; 结尾符 &#x27;</span>)<br></code></pre></td></tr></table></figure><p><strong>每10个处理一次</strong></p><blockquote><p>1、结果列表中的元素索引 % 10 &#x3D;&#x3D; 0</p><p>2、（输出序数-输出开始数+1）%10 &#x3D;&#x3D; 0</p></blockquote><p><strong>开根</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">num**<span class="hljs-number">0.5</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> sqrt<br>sqrt(num)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PAT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>题库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode03：最长连续序列</title>
    <link href="/2024/03/08/LeetCode03/"/>
    <url>/2024/03/08/LeetCode03/</url>
    
    <content type="html"><![CDATA[<h1 id="3-最长连续序列"><a href="#3-最长连续序列" class="headerlink" title="3.最长连续序列"></a>3.最长连续序列</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个未排序的整数数组 <code>nums</code> ，找出数字连续的最长序列（不要求序列元素在原数组中连续）的长度。</p><p>请你设计并实现时间复杂度为 <code>O(n)</code> 的算法解决此问题。</p><p><strong>示例 1：</strong></p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">输入：nums = <span class="hljs-string">[100,4,200,1,3,2]</span><br>输出：<span class="hljs-number">4</span><br>解释：最长数字连续序列是 <span class="hljs-string">[1, 2, 3, 4]</span>。它的长度为 <span class="hljs-number">4</span>。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dns">输入：nums = [<span class="hljs-number">0,3,7,2</span>,<span class="hljs-number">5,8,4,6</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>]<br>输出：<span class="hljs-number">9</span><br></code></pre></td></tr></table></figure><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="（1）官方题解"><a href="#（1）官方题解" class="headerlink" title="（1）官方题解"></a>（1）官方题解</h3><h4 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h4><p>考虑枚举数组中的每个数<code>x</code>，考虑以其为起点，不断尝试寻找<code>x+1</code>,<code>x+2</code>…是否存在。假设匹配到了<code>x+y</code>，那么以<code>x</code>为起点的最长连续序列为<code>x</code>,<code>x+1</code>,<code>x+2</code>…<code>x+y</code>，其长度为<code>y+1</code>，不断枚举并更新答案即可。</p><p>对于匹配的过程，<strong>暴力匹配</strong>是O(n)遍历数组去看是否存在这个数，<strong>更高效的匹配</strong>是用一个哈希表存储数组中的数，查看一个数是否存在，优化到O(1)的时间复杂度。</p><p>仅仅是这样，算法时间复杂度最坏情况下还是会达到O($n^2$)（即外层需要枚举O(n)个数，内层需要暴力匹配O(n)次），无法满足题目的要求。但仔细分析这个过程，我们会发现其中执行了很多不必要的枚举，已知有一个<code>x</code>,<code>x+1</code>,<code>x+2</code>…<code>x+y</code>的连续序列，而重新从<code>x+1</code>,<code>x+2</code>…<code>x+y</code>处开始匹配，得到的结果一定不会优于枚举<code>x</code>为起点的答案，因此，需要跳过。</p><p>判断是否跳过：要枚举的数<code>x</code>一定是在数组中不存在前驱数 <code>x-1</code>的。</p><p><strong>时间复杂度：</strong>外层循环需要O(n)的时间复杂度，只有当一个数是连续序列的第一个数的情况下才会进入内层循环，然后在内层循环中匹配连续序列中的数，因此数组中的每个数只会进入内层循环一次。根据上述分析可知，总时间复杂度为 O(n)。</p><p><strong>空间复杂度：</strong>O(n)。哈希表存储数组中所有的数需要 O(n)的空间。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">longestConsecutive</span>(<span class="hljs-params">self,nums</span>):<br>        longest_streak = <span class="hljs-number">0</span><br>        num_set = <span class="hljs-built_in">set</span>(nums)<br>        <br>        <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> num_set:<br>            <span class="hljs-keyword">if</span> num - <span class="hljs-number">1</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> num_set:<br>                current_num = num<br>                current_streak = <span class="hljs-number">1</span><br>                <br>                <span class="hljs-keyword">while</span> current_num + <span class="hljs-number">1</span> <span class="hljs-keyword">in</span> num_set:<br>                    current_num += <span class="hljs-number">1</span><br>                    current_streak += <span class="hljs-number">1</span><br>                <br>                longest_streak = <span class="hljs-built_in">max</span>(longest_streak,current_streak)<br>        <span class="hljs-keyword">return</span> longest_streak<br></code></pre></td></tr></table></figure><h3 id="（2）我的解法"><a href="#（2）我的解法" class="headerlink" title="（2）我的解法"></a>（2）我的解法</h3><p><strong>时间复杂度：</strong><br>排序：首先，算法中使用了排序，其时间复杂度为 O(n log n)，其中 n 是数组 nums 的长度。这是因为大多数比较排序算法（如快速排序、归并排序等）的时间复杂度都是 O(n log n)。</p><p>遍历：排序之后，算法遍历了排序后的数组一次以计算最长连续序列的长度。这个遍历的时间复杂度是 O(n)，因为每个元素都被访问一次。</p><p>因此，算法的总体时间复杂度主要由排序这一步骤决定，即 O(n log n)。虽然遍历也涉及到数组中的所有元素，但其时间复杂度 O(n) 在排序的时间复杂度 O(n log n) 面前可以忽略不计。</p><p><strong>空间复杂度：</strong></p><p>算法的空间复杂度主要取决于排序算法的空间复杂度。在 Python 中，排序通常使用 Timsort 算法，其最坏情况下的空间复杂度为 O(n)。除此之外，还使用了一个列表 res 来存储每个连续序列的长度，以及几个用于记录状态的变量（如 max_len）。因此，总体空间复杂度也是 O(n)。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">longestConsecutive</span>(<span class="hljs-params">self, nums</span>):<br>        <span class="hljs-keyword">if</span> nums == []:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(nums) == <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>        nums = <span class="hljs-built_in">sorted</span>(nums)<br>        res = []<br>        max_len = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> i,num <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(nums):<br>            <span class="hljs-keyword">if</span> i&lt;<span class="hljs-built_in">len</span>(nums)-<span class="hljs-number">1</span>: <br>                <span class="hljs-keyword">if</span> nums[i+<span class="hljs-number">1</span>] - num == <span class="hljs-number">1</span>:<br>                    max_len +=<span class="hljs-number">1</span><br>                <span class="hljs-keyword">elif</span> nums[i+<span class="hljs-number">1</span>] == num:<br>                    <span class="hljs-keyword">pass</span><br>                <span class="hljs-keyword">else</span>:<br>                    res.append(max_len)<br>                    max_len = <span class="hljs-number">1</span><br>        res.append(max_len)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(res)   <br></code></pre></td></tr></table></figure><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p><strong>使用哈希表的优势</strong></p><blockquote><p>如果输入数组非常大，排序可能会成为性能瓶颈。与之相比，使用哈希表的方法虽然在理论上最坏情况下的时间复杂度也是 O(n)，但在实际应用中往往能够更高效地解决问题，尤其是当数据量大且数组中包含大量连续序列时。</p></blockquote><p><strong>集合set()方法</strong></p><blockquote><p><code>set()</code>方法在Python中用于创建一个无序且不重复的元素集合。这是一种基本的数据结构，适用于去除重复元素以及执行各种集合操作（如并集、交集、差集等）。<code>set()</code>可以接收一个可迭代对象作为输入，比如列表、元组、字典等，然后将其转换成一个集合。如果不提供任何参数，<code>set()</code>会创建一个空集合。</p><ul><li>集合中的元素必须是不可变类型（如整数、浮点数、字符串、元组），不能是可变类型（如列表、字典）。</li><li>使用<code>&#123;&#125;</code>可以创建集合，但如果没有提供任何元素，Python会将其解释为一个空字典而不是空集合。因此，创建空集合必须使用<code>set()</code>。</li><li><code>set()</code>创建的集合是无序的，所以无法保证每次遍历集合时元素的顺序相同。</li></ul></blockquote>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>题库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PAT02：数字分类</title>
    <link href="/2024/03/07/PAT02/"/>
    <url>/2024/03/07/PAT02/</url>
    
    <content type="html"><![CDATA[<h1 id="2-数字分类"><a href="#2-数字分类" class="headerlink" title="2.数字分类"></a>2.数字分类</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一系列正整数，请按要求对数字进行分类，并输出以下5个数字：<br> A1 &#x3D; 能被5整除的数字中所有偶数的和；</p><p> A2 &#x3D; 将被5除后余1的数字按给出顺序进行交错求和，即计算n1-n2+n3-n4…；</p><p> A3 &#x3D; 被5除后余2的数字的个数；</p><p> A4 &#x3D; 被5除后余3的数字的平均数，精确到小数点后1位；</p><p> A5 &#x3D; 被5除后余4的数字中最大数字。</p><p><strong>输入：</strong>每个输入包含1个测试用例。<br>每个测试用例先输入一个不超过1000的正整数N。<br>然后给出N个不超过1000的待分类的正整数。数字间以空格分隔。</p><p><strong>输出：</strong>对给定的N个正整数，按题目要求计算A1~A5并在一行中顺序输出。数字间以空格分隔，但行末不得有多余空格。若其中某一类数字不存在，则在相应位置输出“N”。</p><p><strong>输入例子:</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">13</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span> <span class="hljs-number">10</span> <span class="hljs-number">20</span> <span class="hljs-number">16</span> <span class="hljs-number">18</span><br></code></pre></td></tr></table></figure><p><strong>输出例子:</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">30 </span><span class="hljs-number">11</span> <span class="hljs-number">2</span> <span class="hljs-number">9.7</span> <span class="hljs-number">9</span><br></code></pre></td></tr></table></figure><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="（1）我的解法"><a href="#（1）我的解法" class="headerlink" title="（1）我的解法"></a>（1）我的解法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> sys.stdin:<br>    a1 = []<br>    a2 = []<br>    a3 = []<br>    a4 = []<br>    a5 = []<br>    nums = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,line.split(<span class="hljs-string">&#x27; &#x27;</span>)))    <br>    n = nums[<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> nums[<span class="hljs-number">1</span>:]:<br>        <span class="hljs-keyword">if</span> i % <span class="hljs-number">5</span> == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>            a1.append(i)<br>        <span class="hljs-keyword">if</span> i % <span class="hljs-number">5</span> == <span class="hljs-number">1</span>:<br>            a2.append(i)<br>        <span class="hljs-keyword">if</span> i % <span class="hljs-number">5</span> == <span class="hljs-number">2</span>:<br>            a3.append(i)<br>        <span class="hljs-keyword">if</span> i % <span class="hljs-number">5</span> == <span class="hljs-number">3</span>:<br>            a4.append(i)<br>        <span class="hljs-keyword">if</span> i % <span class="hljs-number">5</span> == <span class="hljs-number">4</span>:<br>            a5.append(i)<br>    <span class="hljs-keyword">if</span> a1:<br>        A1 = <span class="hljs-built_in">sum</span>(a1)<br>    <span class="hljs-keyword">else</span>:<br>        A1 = <span class="hljs-string">&#x27;N&#x27;</span>    <br>    <br>    A2 = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">if</span> a2:<br>        <span class="hljs-keyword">for</span> i,num <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(a2):<br>            A2 += -((-<span class="hljs-number">1</span>)**(i+<span class="hljs-number">1</span>)*num)<br>    <span class="hljs-keyword">else</span>:<br>        A2 = <span class="hljs-string">&#x27;N&#x27;</span><br><br>    <span class="hljs-keyword">if</span> a3:<br>        A3 = <span class="hljs-built_in">len</span>(a3) <br>    <span class="hljs-keyword">else</span>:<br>        A3 = <span class="hljs-string">&#x27;N&#x27;</span>                <br><br>    <span class="hljs-keyword">if</span> a4:<br>        A4 = <span class="hljs-built_in">round</span>(<span class="hljs-built_in">sum</span>(a4) / <span class="hljs-built_in">len</span>(a4),<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">else</span>:<br>        A4 = <span class="hljs-string">&#x27;N&#x27;</span><br>                 <br>    <span class="hljs-keyword">if</span> a5:<br>        A5 = <span class="hljs-built_in">max</span>(a5)<br>    <span class="hljs-keyword">else</span>:<br>        A5 = <span class="hljs-string">&#x27;N&#x27;</span>          <br>    <br>    <span class="hljs-built_in">print</span>(A1,A2,A3,A4,A5,sep=<span class="hljs-string">&#x27; &#x27;</span>)    <br>   <br></code></pre></td></tr></table></figure><h3 id="（2）其他解法"><a href="#（2）其他解法" class="headerlink" title="（2）其他解法"></a>（2）其他解法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python">ary = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split()))<br>n, ary = ary[<span class="hljs-number">0</span>], ary[<span class="hljs-number">1</span>:]<br>A1, A2, A4 = [], [], []<br>A3, A5 = <span class="hljs-number">0</span>, -<span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> ary:<br>    <span class="hljs-keyword">if</span> i % <span class="hljs-number">10</span> == <span class="hljs-number">0</span>:<br>        A1.append(i)<br>    <span class="hljs-keyword">elif</span> i % <span class="hljs-number">5</span> == <span class="hljs-number">1</span>:<br>        A2.append(i)<br>    <span class="hljs-keyword">elif</span> i % <span class="hljs-number">5</span> == <span class="hljs-number">2</span>:<br>        A3 += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">elif</span> i % <span class="hljs-number">5</span> == <span class="hljs-number">3</span>:<br>        A4.append(i)<br>    <span class="hljs-keyword">elif</span> i % <span class="hljs-number">5</span> == <span class="hljs-number">4</span>:<br>        <span class="hljs-keyword">if</span> i &gt; A5:<br>            A5 = i<br>A1 = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">sum</span>(A1)) <span class="hljs-keyword">if</span> A1 <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;N&#x27;</span><br>A2 = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">sum</span>(A2[::<span class="hljs-number">2</span>]) - <span class="hljs-built_in">sum</span>(A2[<span class="hljs-number">1</span>::<span class="hljs-number">2</span>])) <span class="hljs-keyword">if</span> A2 <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;N&#x27;</span><br>A3 = <span class="hljs-built_in">str</span>(A3) <span class="hljs-keyword">if</span> A3 <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;N&#x27;</span><br>A4 = <span class="hljs-string">&#x27;&#123;:.1f&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">sum</span>(A4) / <span class="hljs-built_in">len</span>(A4)) <span class="hljs-keyword">if</span> A4 <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;N&#x27;</span><br>A5 = <span class="hljs-built_in">str</span>(A5) <span class="hljs-keyword">if</span> A5 != -<span class="hljs-number">1</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;N&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27; &#x27;</span>.join((A1, A2, A3, A4, A5)))<br></code></pre></td></tr></table></figure><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p><strong>切片操作</strong></p><blockquote><p>在Python中，对列表进行切片操作时，可以使用<code>[start:stop:step]</code>的形式来指定切片的开始、结束和步长。这里的<code>start</code>表示起始索引，<code>stop</code>表示结束索引（不包含该索引处的元素），<code>step</code>表示步长。计算交错求和的时候，可以计算奇数索引位置上的数字之和减去偶数索引位置上的数字之和。<code>sum(A2[::2])</code>表示求取<code>A2</code>列表中所有偶数索引位置上的数字之和，<code>sum(A2[1::2])</code>表示求取<code>A2</code>列表中所有奇数索引位置上的数字之和。</p></blockquote><p><strong>格式化字符串</strong></p><blockquote><p><code>&#39;&#123;:.1f&#125;&#39;</code> 是一个格式化字符串，它表示将要格式化的值为浮点数，并保留一位小数。这样的格式化字符串会将浮点数格式化为带有一位小数的字符串。</p><ul><li><code>&#123;&#125;</code> 表示一个占位符，用于接受要格式化的值。</li><li><code>:</code> 表示格式说明符的开始。</li><li><code>.1</code> 表示精度为1，即保留一位小数。</li><li><code>f</code> 表示格式化为浮点数。</li></ul><p><code>.format()</code> 方法用于对字符串进行格式化，它可以将指定的值插入到格式化字符串中的大括号处。</p></blockquote><p><strong><code>&#39; &#39;.join()</code>和 <code>sep=&#39; &#39;</code></strong></p><blockquote><p><code>&#39; &#39;.join()</code> 方法的作用是将序列中的元素以指定的字符连接起来形成一个字符串。根据需要在 <code>&#39; &#39;</code> 中间放置任何你想要的分隔符。<code>sep=&#39; &#39;</code> 是 <code>print()</code> 函数的一个参数，用于指定多个要打印内容之间的分隔符</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>PAT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>题库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode02：字母异位词分组</title>
    <link href="/2024/03/06/LeetCode02/"/>
    <url>/2024/03/06/LeetCode02/</url>
    
    <content type="html"><![CDATA[<h1 id="2-字母异位词分组"><a href="#2-字母异位词分组" class="headerlink" title="2.字母异位词分组"></a>2.字母异位词分组</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个字符串数组，请你将 <strong>字母异位词</strong> 组合在一起。可以按任意顺序返回结果列表。</p><p><strong>字母异位词</strong> 是由重新排列源单词的所有字母得到的一个新单词。</p><p><strong>示例 1:</strong></p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs prolog">输入: strs = [<span class="hljs-string">&quot;eat&quot;</span>, <span class="hljs-string">&quot;tea&quot;</span>, <span class="hljs-string">&quot;tan&quot;</span>, <span class="hljs-string">&quot;ate&quot;</span>, <span class="hljs-string">&quot;nat&quot;</span>, <span class="hljs-string">&quot;bat&quot;</span>]<br>输出: [[<span class="hljs-string">&quot;bat&quot;</span>],[<span class="hljs-string">&quot;nat&quot;</span>,<span class="hljs-string">&quot;tan&quot;</span>],[<span class="hljs-string">&quot;ate&quot;</span>,<span class="hljs-string">&quot;eat&quot;</span>,<span class="hljs-string">&quot;tea&quot;</span>]]<br></code></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lua">输入: strs = [<span class="hljs-string">&quot;&quot;</span>]<br>输出: <span class="hljs-string">[[&quot;&quot;]]</span><br></code></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lua">输入: strs = [<span class="hljs-string">&quot;a&quot;</span>]<br>输出: <span class="hljs-string">[[&quot;a&quot;]]</span><br></code></pre></td></tr></table></figure><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="（1）字母排序"><a href="#（1）字母排序" class="headerlink" title="（1）字母排序"></a>（1）字母排序</h3><p>1、首先需要理解什么是字母异位词（相同的字母不同的排列顺序组成的单词）</p><p>2、根据特征进行归类，考虑使用哈希表</p><p>3、构造单词的字符排序，作为键；分组结果，作为值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> collections<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">groupAnagrams</span>(<span class="hljs-params">self, strs</span>):<br>        mp = collections.defaultdict(<span class="hljs-built_in">list</span>)<br><br>        <span class="hljs-keyword">for</span> st <span class="hljs-keyword">in</span> strs:<br>            key = <span class="hljs-string">&quot;&quot;</span>.join(<span class="hljs-built_in">sorted</span>(st))<br>            mp[key].append(st)<br>        <br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">list</span>(mp.values())<br></code></pre></td></tr></table></figure><h3 id="（2）字符计数"><a href="#（2）字符计数" class="headerlink" title="（2）字符计数"></a>（2）字符计数</h3><p>1、观察发现，每个字符出现的次数完全相同</p><p>2、根据特征进行归类，考虑使用哈希表</p><p>3、“#1#3…#0”构造各字母出现次数的特征字符串，作为键；具有相同特征字符串的单词放在一组，作为值</p><h4 id="官方题解"><a href="#官方题解" class="headerlink" title="官方题解"></a><strong>官方题解</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> collections<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">groupAnagrams</span>(<span class="hljs-params">self,strs</span>):<br>        mp = collections.defaultdict(<span class="hljs-built_in">list</span>)<br>        <br>        <span class="hljs-keyword">for</span> st <span class="hljs-keyword">in</span> strs:<br>            counts = [<span class="hljs-number">0</span>] *<span class="hljs-number">26</span><br>            <span class="hljs-keyword">for</span> ch <span class="hljs-keyword">in</span> st:<br>                counts[<span class="hljs-built_in">ord</span>(ch)-<span class="hljs-built_in">ord</span>(<span class="hljs-string">&quot;a&quot;</span>)] += <span class="hljs-number">1</span><br>            <span class="hljs-comment"># 需要将list转换为tuple才可以进行哈希</span><br>            mp[<span class="hljs-built_in">tuple</span>(counts)].append(st)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">list</span>(mp.values())<br></code></pre></td></tr></table></figure><h4 id="我的解法"><a href="#我的解法" class="headerlink" title="我的解法"></a><strong>我的解法</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">groupAnagrams</span>(<span class="hljs-params">self, strs</span>):<br>        total_dict = &#123;&#125;<br>        same_map = &#123;&#125;<br>        res = []<br>        <span class="hljs-keyword">for</span> index,word <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(strs):<br>            word_dict = &#123;&#125;<br>            <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> word:<br>                word_dict[s] = word_dict.get(s,<span class="hljs-number">0</span>) + <span class="hljs-number">1</span><br>            total_dict[index] = <span class="hljs-built_in">sorted</span>(word_dict.items())<br>        <span class="hljs-keyword">for</span> key, val <span class="hljs-keyword">in</span> total_dict.items():<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">tuple</span>(val) <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> same_map:<br>                same_map[<span class="hljs-built_in">tuple</span>(val)] = [key]<br>            <span class="hljs-keyword">else</span>:<br>                same_map[<span class="hljs-built_in">tuple</span>(val)].append(key)<br>        <span class="hljs-keyword">for</span> tar <span class="hljs-keyword">in</span> same_map.values():<br>            target = [strs[i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> tar]<br>            res.append(target)<br>        <span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></figure><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><ul><li><strong>时间与空间复杂度</strong></li></ul><blockquote><p>1、字母排序：N是单词的个数，K是单词的最大长度。遍历每个单词的时间复杂度是O(N)，对于每个单词的排序时间复杂度为O(Klog(K))。综合以上两点，时间复杂度为O(NKlog(K))。空间上需要O(NK)存储所有单词。</p><p>2、字符计数：因为需要遍历每个单词的每个字符，时间复杂度为O(NK)，空间复杂度为O(NK)。</p></blockquote><ul><li><strong><code>defaultdict</code></strong></li></ul><blockquote><p><code>collections.defaultdict(list)</code> 是 Python 中 <code>collections</code> 模块提供的一个类，它是字典的一个子类，用于创建默认值为指定类型（这里是列表）的字典。在使用 <code>defaultdict</code> 时，如果访问一个不存在的键，它会自动创建该键，并将其对应的值初始化为指定类型的默认值。</p></blockquote><ul><li><strong><code>ord()</code> 函数</strong></li></ul><blockquote><p><code>ord()</code> 函数用于返回表示单个字符的 Unicode 字符编码。对于小写字母，<code>ord(&quot;a&quot;)</code> 返回的是 97，<code>ord(&quot;b&quot;)</code> 返回的是 98，依此类推。<code>ord(ch) - ord(&quot;a&quot;)</code>：假设当前字符是小写字母，通过将当前字符的 Unicode 编码减去小写字母 “a” 的 Unicode 编码（即 97），可以得到一个从 0 到 25 的索引值，用来表示该字符在英文字母中的位置，例如 a 对应 0，b 对应 1，依此类推。</p></blockquote><ul><li><strong>字典（dictionary）</strong></li></ul><blockquote><p>在Python中，字典（dictionary）是一种无序的数据类型，用于存储键值对。字典是一种非常灵活和强大的数据结构，常用于存储和操作各种类型的数据。</p></blockquote><p>以下是关于字典的一些常见用法：</p><ol><li><p>创建字典：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">my_dict = &#123;<span class="hljs-string">&#x27;A&#x27;</span>: <span class="hljs-number">100</span>, <span class="hljs-string">&#x27;B&#x27;</span>: <span class="hljs-number">200</span>, <span class="hljs-string">&#x27;C&#x27;</span>: <span class="hljs-number">300</span>&#125;<br></code></pre></td></tr></table></figure></li><li><p>添加或更新键值对：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">my_dict[<span class="hljs-string">&#x27;D&#x27;</span>] = <span class="hljs-number">400</span>  <span class="hljs-comment"># 添加新的键值对</span><br>my_dict[<span class="hljs-string">&#x27;A&#x27;</span>] = <span class="hljs-number">500</span>  <span class="hljs-comment"># 更新已有键的值</span><br></code></pre></td></tr></table></figure></li><li><p>访问字典中的元素：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">value = my_dict[<span class="hljs-string">&#x27;A&#x27;</span>]  <span class="hljs-comment"># 获取键为&#x27;A&#x27;的值</span><br></code></pre></td></tr></table></figure></li><li><p>删除键值对：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">del</span> my_dict[<span class="hljs-string">&#x27;B&#x27;</span>]  <span class="hljs-comment"># 删除键为&#x27;B&#x27;的键值对</span><br></code></pre></td></tr></table></figure></li><li><p>遍历字典：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> my_dict.items():<br>    <span class="hljs-built_in">print</span>(key, value)<br></code></pre></td></tr></table></figure></li><li><p>检查键是否存在：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;A&#x27;</span> <span class="hljs-keyword">in</span> my_dict:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;A exists in the dictionary&#x27;</span>)<br></code></pre></td></tr></table></figure></li><li><p>获取所有键或所有值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">keys = my_dict.keys()  <span class="hljs-comment"># 获取所有键</span><br>values = my_dict.values()  <span class="hljs-comment"># 获取所有值</span><br></code></pre></td></tr></table></figure></li><li><p>获取默认值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">value = my_dict.get(<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-number">0</span>)  <span class="hljs-comment"># 获取键&#x27;A&#x27;的值，如果不存在则返回默认值0</span><br></code></pre></td></tr></table></figure></li><li><p>使用字典推导式创建字典：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">squares = &#123;x: x*x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">6</span>)&#125;  <span class="hljs-comment"># 创建包含1到5的平方的字典</span><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>题库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PAT01：A+B和C</title>
    <link href="/2024/03/02/PAT01/"/>
    <url>/2024/03/02/PAT01/</url>
    
    <content type="html"><![CDATA[<h1 id="1-A-B和C"><a href="#1-A-B和C" class="headerlink" title="1.A+B和C"></a>1.A+B和C</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定区间[-231, 231]内的3个整数A、B和C，请判断A+B是否大于C。</p><p><strong>输入：</strong>输入第1行给出正整数T(&lt;&#x3D;10)，是测试用例的个数。随后给出T组测试用例，每组占一行，顺序给出A、B和C。整数间以空格分隔。</p><p><strong>输出：</strong>对每组测试用例，在一行中输出“Case #X: true”如果A+B&gt;C，否则输出“Case #X: false”，其中X是测试用例的编号（从1开始）。</p><p><strong>输入例子：</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">4</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">3</span> <span class="hljs-number">4</span><br><span class="hljs-symbol">2147483647 </span><span class="hljs-number">0</span> <span class="hljs-number">2147483646</span><br><span class="hljs-symbol">0 </span>-<span class="hljs-number">2147483648</span> -<span class="hljs-number">2147483647</span><br></code></pre></td></tr></table></figure><p><strong>输出例子：</strong></p><figure class="highlight cal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cal"><span class="hljs-keyword">Case</span> <span class="hljs-string">#1</span>: <span class="hljs-literal">false</span><br><span class="hljs-keyword">Case</span> <span class="hljs-string">#2</span>: <span class="hljs-literal">true</span><br><span class="hljs-keyword">Case</span> <span class="hljs-string">#3</span>: <span class="hljs-literal">true</span><br><span class="hljs-keyword">Case</span> <span class="hljs-string">#4</span>: <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="（1）我的解法"><a href="#（1）我的解法" class="headerlink" title="（1）我的解法"></a>（1）我的解法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><br>index = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> sys.stdin:<br>    index +=<span class="hljs-number">1</span><br>    a = line.split()<br>    a = [<span class="hljs-built_in">int</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a]<br>    <span class="hljs-keyword">if</span> index == <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Case #<span class="hljs-subst">&#123;index-<span class="hljs-number">1</span>&#125;</span>: <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(a[<span class="hljs-number">0</span>]+a[<span class="hljs-number">1</span>]&gt;a[<span class="hljs-number">2</span>]).lower()&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="（2）其他解法"><a href="#（2）其他解法" class="headerlink" title="（2）其他解法"></a>（2）其他解法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    a,b,c = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Case #&#x27;</span>+<span class="hljs-built_in">str</span>((i+<span class="hljs-number">1</span>))+<span class="hljs-string">&#x27;: true&#x27;</span> <span class="hljs-keyword">if</span> a+b&gt;c <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;Case #&#x27;</span>+<span class="hljs-built_in">str</span>((i+<span class="hljs-number">1</span>))+<span class="hljs-string">&#x27;: false&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><ul><li><code>sys.stdin</code></li></ul><blockquote><p><code>sys.stdin</code>是Python中<code>sys</code>模块的一个属性，代表了标准输入流。在计算机程序中，标准输入流是一个用于接收输入数据的通道，通常情况下它是与键盘输入关联的，但也可以通过重定向或管道从文件或其他程序接收输入。</p><p>在Python程序中，使用<code>sys.stdin</code>可以读取来自命令行（或任何被重定向为标准输入源的数据）的输入。<code>sys.stdin</code>本质上是一个文件对象，因此可以对它使用文件操作的方法，如<code>read()</code>, <code>readline()</code>和<code>readlines()</code>等，来读取输入的数据。</p><p>1、<code>sys.stdin.read()</code>: 读取并返回所有剩余的输入数据，直到遇到EOF（文件结束符）。</p><p>2、<code>sys.stdin.readline()</code>: 每次调用读取一行输入，包括行尾的换行符，如果已经到达EOF，则返回一个空字符串。</p><p>3、<code>sys.stdin.readlines()</code>: 读取所有剩余的输入行，并将它们作为字符串列表返回。</p><p><code>for line in sys.stdin:</code>循环会逐行读取标准输入直到EOF。这种方式特别适合处理不确定数量的输入行。</p><p>在命令行环境中，通常可以通过<code>Ctrl+D</code>（在Unix&#x2F;Linux&#x2F;macOS系统中）或<code>Ctrl+Z</code>然后回车（在Windows系统中）来发送EOF信号。此外，<code>sys.stdin</code>也常被用于从文件中读取输入，通过命令行重定向操作，例如<code>python script.py &lt; inputfile.txt</code>，这时<code>inputfile.txt</code>的内容会被作为标准输入传递给脚本。</p></blockquote><ul><li><strong>三元运算符</strong></li></ul><blockquote><p><code>print(&quot;Case #&quot;+str(i+1)+&quot;: true&quot; if b+c&gt;d else &quot;Case #&quot;+str(i+1)+&quot;: false&quot;)</code>: </p><p>使用条件表达式（三元操作符）简化逻辑判断，而且字符串不能直接拼接整数，需要先对整数进行<code>str()</code></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>PAT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>题库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode01：两数之和</title>
    <link href="/2024/03/02/LeetCode01/"/>
    <url>/2024/03/02/LeetCode01/</url>
    
    <content type="html"><![CDATA[<h1 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1. 两数之和"></a>1. 两数之和</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个整数数组 <code>nums</code> 和一个整数目标值 <code>target</code>，请你在该数组中找出 <strong>和为目标值</strong> <em><code>target</code></em> 的那 <strong>两个</strong> 整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p><p>你可以按任意顺序返回答案。</p><p><strong>示例 1：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：nums = <span class="hljs-comment">[2,7,11,15]</span>, target = 9<br>输出：<span class="hljs-comment">[0,1]</span><br>解释：因为 nums<span class="hljs-comment">[0]</span> + nums<span class="hljs-comment">[1]</span> == 9 ，返回 <span class="hljs-comment">[0, 1]</span> 。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：nums = <span class="hljs-comment">[3,2,4]</span>, target = 6<br>输出：<span class="hljs-comment">[1,2]</span><br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：nums = <span class="hljs-comment">[3,3]</span>, target = 6<br>输出：<span class="hljs-comment">[0,1]</span><br></code></pre></td></tr></table></figure><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="（1）暴力枚举"><a href="#（1）暴力枚举" class="headerlink" title="（1）暴力枚举"></a>（1）暴力枚举</h3><p>枚举数组中的每一个数<code>x</code>，寻找数组中是否存在<code>target-x</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">twoSum</span>(<span class="hljs-params">self,nums,target</span>):<br>        n = <span class="hljs-built_in">len</span>(nums)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i+<span class="hljs-number">1</span>,n):<br>                <span class="hljs-keyword">if</span> nums[i] + nums[j] == target:<br>                    <span class="hljs-keyword">return</span> [i,j]<br>        <span class="hljs-keyword">return</span> []<br></code></pre></td></tr></table></figure><h3 id="（2）哈希表"><a href="#（2）哈希表" class="headerlink" title="（2）哈希表"></a>（2）哈希表</h3><p>对于数组中的每一个数<code>x</code>，首先查询哈希表中是否存在<code>target-x</code>，如果存在则返回结果，不存在就将<code>x</code>插入到哈希表中，保证不会让<code>x</code>和自己匹配。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">twoSum</span>(<span class="hljs-params">self,nums,target</span>):<br>        hashtable = <span class="hljs-built_in">dict</span>()<br>        <span class="hljs-keyword">for</span> i,num <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(nums):<br>            num2 = target - num <br>            <span class="hljs-built_in">print</span>(num,num2)<br>            <span class="hljs-keyword">if</span> num2 <span class="hljs-keyword">in</span> hashtable:<br>                <span class="hljs-keyword">return</span> [i,hashtable[num2]]<br>            hashtable[num] = i<br>            <span class="hljs-built_in">print</span>(hashtable)<br>        <span class="hljs-keyword">return</span> []    <br></code></pre></td></tr></table></figure><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><ul><li><p><strong>是否会报超出索引异常</strong></p><blockquote><p>在方法一的双层for循环中，假设<code>nums</code>为5个元素，当for的外层循环遍历到最后一个元素时，<code>i</code>为4，内层循环涉及到<code>for j in range(5,5)</code>，生成的序列将是空的。因此，<code>for j in range(5,5)</code> 实际上不会执行循环体内的任何代码，也不存在报错。在 Python 中，尝试访问超出数组（列表）索引的元素会引发错误。具体来说，如果尝试访问一个不存在的索引位置，Python 会抛出 <code>IndexError</code> 异常。</p></blockquote></li><li><p><strong>时间与空间复杂度</strong></p><blockquote><p>1、使用暴力枚举，时间复杂度为O($n^2$​)，因为需要使用两层循环来检查数组中每对不同的元素，看它们的和是否等于 <code>target</code>；空间复杂度为O(1)，因为除了输入和输出之外，只需要有限的额外空间。</p><p>2、使用哈希表，时间复杂度为O(n)，因为只需要遍历数组一次，对于每个元素，可以在 O(1) 的时间内通过哈希表检查 <code>target - num</code> 是否存在；空间复杂度为O(n)，因为最坏的情况下，可能需要将数组中的所有元素都存储在哈希表中。</p></blockquote></li></ul>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>题库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Test</title>
    <link href="/2024/02/28/Test/"/>
    <url>/2024/02/28/Test/</url>
    
    <content type="html"><![CDATA[<h1 id="欢迎你"><a href="#欢迎你" class="headerlink" title="欢迎你"></a>欢迎你</h1><p>这是一篇测试文章。</p><p>我是一个很懒的人，做到这一步已经很棒了。</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202402281629110.jpeg" alt="有什么特别可爱猫猫的动态图或表情包吗？ - 知乎"></p>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>乱七八糟</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
