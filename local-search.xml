<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>LeetCode02</title>
    <link href="/2024/03/06/LeetCode02/"/>
    <url>/2024/03/06/LeetCode02/</url>
    
    <content type="html"><![CDATA[<h1 id="2-字母异位词分组"><a href="#2-字母异位词分组" class="headerlink" title="2.字母异位词分组"></a>2.字母异位词分组</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个字符串数组，请你将 <strong>字母异位词</strong> 组合在一起。可以按任意顺序返回结果列表。</p><p><strong>字母异位词</strong> 是由重新排列源单词的所有字母得到的一个新单词。</p><p><strong>示例 1:</strong></p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs prolog">输入: strs = [<span class="hljs-string">&quot;eat&quot;</span>, <span class="hljs-string">&quot;tea&quot;</span>, <span class="hljs-string">&quot;tan&quot;</span>, <span class="hljs-string">&quot;ate&quot;</span>, <span class="hljs-string">&quot;nat&quot;</span>, <span class="hljs-string">&quot;bat&quot;</span>]<br>输出: [[<span class="hljs-string">&quot;bat&quot;</span>],[<span class="hljs-string">&quot;nat&quot;</span>,<span class="hljs-string">&quot;tan&quot;</span>],[<span class="hljs-string">&quot;ate&quot;</span>,<span class="hljs-string">&quot;eat&quot;</span>,<span class="hljs-string">&quot;tea&quot;</span>]]<br></code></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lua">输入: strs = [<span class="hljs-string">&quot;&quot;</span>]<br>输出: <span class="hljs-string">[[&quot;&quot;]]</span><br></code></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lua">输入: strs = [<span class="hljs-string">&quot;a&quot;</span>]<br>输出: <span class="hljs-string">[[&quot;a&quot;]]</span><br></code></pre></td></tr></table></figure><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="（1）字母排序"><a href="#（1）字母排序" class="headerlink" title="（1）字母排序"></a>（1）字母排序</h3><p>1、首先需要理解什么是字母异位词（相同的字母不同的排列顺序组成的单词）</p><p>2、根据特征进行归类，考虑使用哈希表</p><p>3、构造单词的字符排序，作为键；分组结果，作为值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> collections<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">groupAnagrams</span>(<span class="hljs-params">self, strs</span>):<br>        mp = collections.defaultdict(<span class="hljs-built_in">list</span>)<br><br>        <span class="hljs-keyword">for</span> st <span class="hljs-keyword">in</span> strs:<br>            key = <span class="hljs-string">&quot;&quot;</span>.join(<span class="hljs-built_in">sorted</span>(st))<br>            mp[key].append(st)<br>        <br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">list</span>(mp.values())<br></code></pre></td></tr></table></figure><h3 id="（2）字符计数"><a href="#（2）字符计数" class="headerlink" title="（2）字符计数"></a>（2）字符计数</h3><p>1、观察发现，每个字符出现的次数完全相同</p><p>2、根据特征进行归类，考虑使用哈希表</p><p>3、“#1#3…#0”构造各字母出现次数的特征字符串，作为键；具有相同特征字符串的单词放在一组，作为值</p><h4 id="官方题解"><a href="#官方题解" class="headerlink" title="官方题解"></a><strong>官方题解</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> collections<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">groupAnagrams</span>(<span class="hljs-params">self,strs</span>):<br>        mp = collections.defaultdict(<span class="hljs-built_in">list</span>)<br>        <br>        <span class="hljs-keyword">for</span> st <span class="hljs-keyword">in</span> strs:<br>            counts = [<span class="hljs-number">0</span>] *<span class="hljs-number">26</span><br>            <span class="hljs-keyword">for</span> ch <span class="hljs-keyword">in</span> st:<br>                counts[<span class="hljs-built_in">ord</span>(ch)-<span class="hljs-built_in">ord</span>(<span class="hljs-string">&quot;a&quot;</span>)] += <span class="hljs-number">1</span><br>            <span class="hljs-comment"># 需要将list转换为tuple才可以进行哈希</span><br>            mp[<span class="hljs-built_in">tuple</span>(counts)].append(st)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">list</span>(mp.values())<br></code></pre></td></tr></table></figure><h4 id="我的解法"><a href="#我的解法" class="headerlink" title="我的解法"></a><strong>我的解法</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">groupAnagrams</span>(<span class="hljs-params">self, strs</span>):<br>        total_dict = &#123;&#125;<br>        same_map = &#123;&#125;<br>        res = []<br>        <span class="hljs-keyword">for</span> index,word <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(strs):<br>            word_dict = &#123;&#125;<br>            <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> word:<br>                word_dict[s] = word_dict.get(s,<span class="hljs-number">0</span>) + <span class="hljs-number">1</span><br>            total_dict[index] = <span class="hljs-built_in">sorted</span>(word_dict.items())<br>        <span class="hljs-keyword">for</span> key, val <span class="hljs-keyword">in</span> total_dict.items():<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">tuple</span>(val) <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> same_map:<br>                same_map[<span class="hljs-built_in">tuple</span>(val)] = [key]<br>            <span class="hljs-keyword">else</span>:<br>                same_map[<span class="hljs-built_in">tuple</span>(val)].append(key)<br>        <span class="hljs-keyword">for</span> tar <span class="hljs-keyword">in</span> same_map.values():<br>            target = [strs[i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> tar]<br>            res.append(target)<br>        <span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></figure><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><ul><li><strong>时间与空间复杂度</strong></li></ul><blockquote><p>1、字母排序：N是单词的个数，K是单词的最大长度。遍历每个单词的时间复杂度是O(N)，对于每个单词的排序时间复杂度为O(Klog(K))。综合以上两点，时间复杂度为O(NKlog(K))。空间上需要O(NK)存储所有单词。</p><p>2、字符计数：因为需要遍历每个单词的每个字符，时间复杂度为O(NK)，空间复杂度为O(NK)。</p></blockquote><ul><li><strong><code>defaultdict</code></strong></li></ul><blockquote><p><code>collections.defaultdict(list)</code> 是 Python 中 <code>collections</code> 模块提供的一个类，它是字典的一个子类，用于创建默认值为指定类型（这里是列表）的字典。在使用 <code>defaultdict</code> 时，如果访问一个不存在的键，它会自动创建该键，并将其对应的值初始化为指定类型的默认值。</p></blockquote><ul><li><strong><code>ord()</code> 函数</strong></li></ul><blockquote><p><code>ord()</code> 函数用于返回表示单个字符的 Unicode 字符编码。对于小写字母，<code>ord(&quot;a&quot;)</code> 返回的是 97，<code>ord(&quot;b&quot;)</code> 返回的是 98，依此类推。<code>ord(ch) - ord(&quot;a&quot;)</code>：假设当前字符是小写字母，通过将当前字符的 Unicode 编码减去小写字母 “a” 的 Unicode 编码（即 97），可以得到一个从 0 到 25 的索引值，用来表示该字符在英文字母中的位置，例如 a 对应 0，b 对应 1，依此类推。</p></blockquote><ul><li><strong>字典list</strong></li></ul><blockquote><p>在Python中，字典（dictionary）是一种无序的数据类型，用于存储键值对。字典是一种非常灵活和强大的数据结构，常用于存储和操作各种类型的数据。</p></blockquote><p>以下是关于字典的一些常见用法：</p><ol><li><p>创建字典：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">my_dict</span> = &#123;<span class="hljs-string">&#x27;A&#x27;</span>: <span class="hljs-number">100</span>, <span class="hljs-string">&#x27;B&#x27;</span>: <span class="hljs-number">200</span>, <span class="hljs-string">&#x27;C&#x27;</span>: <span class="hljs-number">300</span>&#125;<br></code></pre></td></tr></table></figure></li><li><p>添加或更新键值对：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c">my_dict[&#x27;D&#x27;] = <span class="hljs-number">400</span>  <span class="hljs-meta"># 添加新的键值对</span><br>my_dict[&#x27;A&#x27;] = <span class="hljs-number">500</span>  <span class="hljs-meta"># 更新已有键的值</span><br></code></pre></td></tr></table></figure></li><li><p>访问字典中的元素：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">value</span> = my_dict[<span class="hljs-string">&#x27;A&#x27;</span>]  <span class="hljs-comment"># 获取键为&#x27;A&#x27;的值</span><br></code></pre></td></tr></table></figure></li><li><p>删除键值对：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">del my_dict[<span class="hljs-string">&#x27;B&#x27;</span>]  <span class="hljs-meta"># 删除键为<span class="hljs-string">&#x27;B&#x27;</span>的键值对</span><br></code></pre></td></tr></table></figure></li><li><p>遍历字典：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-keyword">for</span> <span class="hljs-built_in">key</span>, value <span class="hljs-keyword">in</span> my_dict.items():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">key</span>, value)<br></code></pre></td></tr></table></figure></li><li><p>检查键是否存在：</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable"><span class="hljs-keyword">if</span></span> <span class="hljs-string">&#x27;A&#x27;</span> <span class="hljs-variable"><span class="hljs-keyword">in</span></span> <span class="hljs-variable">my_dict</span>:<br>    <span class="hljs-function"><span class="hljs-title">print</span>(<span class="hljs-string">&#x27;A exists in the dictionary&#x27;</span>)</span><br></code></pre></td></tr></table></figure></li><li><p>获取所有键或所有值：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">keys</span> = my_dict.keys()  <span class="hljs-comment"># 获取所有键</span><br><span class="hljs-attr">values</span> = my_dict.values()  <span class="hljs-comment"># 获取所有值</span><br></code></pre></td></tr></table></figure></li><li><p>获取默认值：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">value</span> = my_dict.get(<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-number">0</span>)  <span class="hljs-comment"># 获取键&#x27;A&#x27;的值，如果不存在则返回默认值0</span><br></code></pre></td></tr></table></figure></li><li><p>使用字典推导式创建字典：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">squares</span> = &#123;x: x*x for x in range(<span class="hljs-number">1</span>, <span class="hljs-number">6</span>)&#125;  # 创建包含<span class="hljs-number">1</span>到<span class="hljs-number">5</span>的平方的字典<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>题库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PAT01：A+B和C</title>
    <link href="/2024/03/02/PAT01/"/>
    <url>/2024/03/02/PAT01/</url>
    
    <content type="html"><![CDATA[<h1 id="1-A-B和C"><a href="#1-A-B和C" class="headerlink" title="1.A+B和C"></a>1.A+B和C</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定区间[-231, 231]内的3个整数A、B和C，请判断A+B是否大于C。</p><p><strong>输入：</strong>输入第1行给出正整数T(&lt;&#x3D;10)，是测试用例的个数。随后给出T组测试用例，每组占一行，顺序给出A、B和C。整数间以空格分隔。</p><p><strong>输出：</strong>对每组测试用例，在一行中输出“Case #X: true”如果A+B&gt;C，否则输出“Case #X: false”，其中X是测试用例的编号（从1开始）。</p><p><strong>输入例子：</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">4</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">3</span> <span class="hljs-number">4</span><br><span class="hljs-symbol">2147483647 </span><span class="hljs-number">0</span> <span class="hljs-number">2147483646</span><br><span class="hljs-symbol">0 </span>-<span class="hljs-number">2147483648</span> -<span class="hljs-number">2147483647</span><br></code></pre></td></tr></table></figure><p><strong>输出例子：</strong></p><figure class="highlight cal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cal"><span class="hljs-keyword">Case</span> <span class="hljs-string">#1</span>: <span class="hljs-literal">false</span><br><span class="hljs-keyword">Case</span> <span class="hljs-string">#2</span>: <span class="hljs-literal">true</span><br><span class="hljs-keyword">Case</span> <span class="hljs-string">#3</span>: <span class="hljs-literal">true</span><br><span class="hljs-keyword">Case</span> <span class="hljs-string">#4</span>: <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="（1）我的解法"><a href="#（1）我的解法" class="headerlink" title="（1）我的解法"></a>（1）我的解法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><br>index = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> sys.stdin:<br>    index +=<span class="hljs-number">1</span><br>    a = line.split()<br>    a = [<span class="hljs-built_in">int</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a]<br>    <span class="hljs-keyword">if</span> index == <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Case #<span class="hljs-subst">&#123;index-<span class="hljs-number">1</span>&#125;</span>: <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(a[<span class="hljs-number">0</span>]+a[<span class="hljs-number">1</span>]&gt;a[<span class="hljs-number">2</span>]).lower()&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="（2）其他解法"><a href="#（2）其他解法" class="headerlink" title="（2）其他解法"></a>（2）其他解法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    a,b,c = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Case #&#x27;</span>+<span class="hljs-built_in">str</span>((i+<span class="hljs-number">1</span>))+<span class="hljs-string">&#x27;: true&#x27;</span> <span class="hljs-keyword">if</span> a+b&gt;c <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;Case #&#x27;</span>+<span class="hljs-built_in">str</span>((i+<span class="hljs-number">1</span>))+<span class="hljs-string">&#x27;: false&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><ul><li><code>sys.stdin</code></li></ul><blockquote><p><code>sys.stdin</code>是Python中<code>sys</code>模块的一个属性，代表了标准输入流。在计算机程序中，标准输入流是一个用于接收输入数据的通道，通常情况下它是与键盘输入关联的，但也可以通过重定向或管道从文件或其他程序接收输入。</p><p>在Python程序中，使用<code>sys.stdin</code>可以读取来自命令行（或任何被重定向为标准输入源的数据）的输入。<code>sys.stdin</code>本质上是一个文件对象，因此可以对它使用文件操作的方法，如<code>read()</code>, <code>readline()</code>和<code>readlines()</code>等，来读取输入的数据。</p><p>1、<code>sys.stdin.read()</code>: 读取并返回所有剩余的输入数据，直到遇到EOF（文件结束符）。</p><p>2、<code>sys.stdin.readline()</code>: 每次调用读取一行输入，包括行尾的换行符，如果已经到达EOF，则返回一个空字符串。</p><p>3、<code>sys.stdin.readlines()</code>: 读取所有剩余的输入行，并将它们作为字符串列表返回。</p><p><code>for line in sys.stdin:</code>循环会逐行读取标准输入直到EOF。这种方式特别适合处理不确定数量的输入行。</p><p>在命令行环境中，通常可以通过<code>Ctrl+D</code>（在Unix&#x2F;Linux&#x2F;macOS系统中）或<code>Ctrl+Z</code>然后回车（在Windows系统中）来发送EOF信号。此外，<code>sys.stdin</code>也常被用于从文件中读取输入，通过命令行重定向操作，例如<code>python script.py &lt; inputfile.txt</code>，这时<code>inputfile.txt</code>的内容会被作为标准输入传递给脚本。</p></blockquote><ul><li><strong>三元运算符</strong></li></ul><blockquote><p><code>print(&quot;Case #&quot;+str(i+1)+&quot;: true&quot; if b+c&gt;d else &quot;Case #&quot;+str(i+1)+&quot;: false&quot;)</code>: </p><p>使用条件表达式（三元操作符）简化逻辑判断，而且字符串不能直接拼接整数，需要先对整数进行<code>str()</code></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>PAT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>题库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode01：两数之和</title>
    <link href="/2024/03/02/LeetCode01/"/>
    <url>/2024/03/02/LeetCode01/</url>
    
    <content type="html"><![CDATA[<h1 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1. 两数之和"></a>1. 两数之和</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个整数数组 <code>nums</code> 和一个整数目标值 <code>target</code>，请你在该数组中找出 <strong>和为目标值</strong> <em><code>target</code></em> 的那 <strong>两个</strong> 整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p><p>你可以按任意顺序返回答案。</p><p><strong>示例 1：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：nums = <span class="hljs-comment">[2,7,11,15]</span>, target = 9<br>输出：<span class="hljs-comment">[0,1]</span><br>解释：因为 nums<span class="hljs-comment">[0]</span> + nums<span class="hljs-comment">[1]</span> == 9 ，返回 <span class="hljs-comment">[0, 1]</span> 。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：nums = <span class="hljs-comment">[3,2,4]</span>, target = 6<br>输出：<span class="hljs-comment">[1,2]</span><br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：nums = <span class="hljs-comment">[3,3]</span>, target = 6<br>输出：<span class="hljs-comment">[0,1]</span><br></code></pre></td></tr></table></figure><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="（1）暴力枚举"><a href="#（1）暴力枚举" class="headerlink" title="（1）暴力枚举"></a>（1）暴力枚举</h3><p>枚举数组中的每一个数<code>x</code>，寻找数组中是否存在<code>target-x</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">twoSum</span>(<span class="hljs-params">self,nums,target</span>):<br>        n = <span class="hljs-built_in">len</span>(nums)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i+<span class="hljs-number">1</span>,n):<br>                <span class="hljs-keyword">if</span> nums[i] + nums[j] == target:<br>                    <span class="hljs-keyword">return</span> [i,j]<br>        <span class="hljs-keyword">return</span> []<br></code></pre></td></tr></table></figure><h3 id="（2）哈希表"><a href="#（2）哈希表" class="headerlink" title="（2）哈希表"></a>（2）哈希表</h3><p>对于数组中的每一个数<code>x</code>，首先查询哈希表中是否存在<code>target-x</code>，如果存在则返回结果，不存在就将<code>x</code>插入到哈希表中，保证不会让<code>x</code>和自己匹配。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">twoSum</span>(<span class="hljs-params">self,nums,target</span>):<br>        hashtable = <span class="hljs-built_in">dict</span>()<br>        <span class="hljs-keyword">for</span> i,num <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(nums):<br>            num2 = target - num <br>            <span class="hljs-built_in">print</span>(num,num2)<br>            <span class="hljs-keyword">if</span> num2 <span class="hljs-keyword">in</span> hashtable:<br>                <span class="hljs-keyword">return</span> [i,hashtable[num2]]<br>            hashtable[num] = i<br>            <span class="hljs-built_in">print</span>(hashtable)<br>        <span class="hljs-keyword">return</span> []    <br></code></pre></td></tr></table></figure><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><ul><li><p><strong>是否会报超出索引异常</strong></p><blockquote><p>在方法一的双层for循环中，假设<code>nums</code>为5个元素，当for的外层循环遍历到最后一个元素时，<code>i</code>为4，内层循环涉及到<code>for j in range(5,5)</code>，生成的序列将是空的。因此，<code>for j in range(5,5)</code> 实际上不会执行循环体内的任何代码，也不存在报错。在 Python 中，尝试访问超出数组（列表）索引的元素会引发错误。具体来说，如果尝试访问一个不存在的索引位置，Python 会抛出 <code>IndexError</code> 异常。</p></blockquote></li><li><p><strong>时间与空间复杂度</strong></p><blockquote><p>1、使用暴力枚举，时间复杂度为<img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202403060950412.png" alt="image-20240306095011380">，因为需要使用两层循环来检查数组中每对不同的元素，看它们的和是否等于 <code>target</code>；空间复杂度为O(1)，因为除了输入和输出之外，只需要有限的额外空间。</p><p>2、使用哈希表，时间复杂度为O(n)，因为只需要遍历数组一次，对于每个元素，可以在 O(1) 的时间内通过哈希表检查 <code>target - num</code> 是否存在；空间复杂度为O(n)，因为最坏的情况下，可能需要将数组中的所有元素都存储在哈希表中。</p></blockquote></li></ul>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>题库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Test</title>
    <link href="/2024/02/28/Test/"/>
    <url>/2024/02/28/Test/</url>
    
    <content type="html"><![CDATA[<h1 id="欢迎你"><a href="#欢迎你" class="headerlink" title="欢迎你"></a>欢迎你</h1><p>这是一篇测试文章。</p><p>我是一个很懒的人，做到这一步已经很棒了。</p><p><img src="https://an-hexo-blog.oss-cn-beijing.aliyuncs.com/img/202402281629110.jpeg" alt="有什么特别可爱猫猫的动态图或表情包吗？ - 知乎"></p>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>乱七八糟</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
